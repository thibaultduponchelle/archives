`$=`;$_=\%!;($_)=/(.)/;$==++$|;($.,$/,$,,$\,$",$;,$^,$#,$~,$*,$:,@%)=(
$!=~/(.)(.).(.)(.)(.)(.)..(.)(.)(.)..(.)......(.)/,$"),$=++;$.++;$.++;
$_++;$_++;($_,$\,$,)=($~.$"."$;$/$%[$?]$_$\$,$:$%[$?]",$"&$~,$#,);$,++
;$,++;$^|=$";`$_$\$,$/$:$;$~$*$%[$?]$.$~$*${#}$%[$?]$;$\$"$^$~$*.>&$=`
        -- Just another Perl hacker. (broken)
%
''=~('(?{'.('-)@.)@_*([]@!@/)(@)@-@),@(@@+@)'
^'][)@]`}`]()`@.@]@%[`}%[@`@!#@%[').',"})')
        -- (broken)
%
not exp log srand xor s qq qx xor
s x x length uc ord and print chr
ord for qw q join use sub tied qx
xor eval xor print qq q q xor int
eval lc q m cos and print chr ord
for qw y abs ne open tied hex exp
ref y m xor scalar srand print qq
q q xor int eval lc qq y sqrt cos
and print chr ord for qw x printf
each return local x y or print qq
s s and eval q s undef or oct xor
time xor ref print chr int ord lc
foreach qw y hex alarm chdir kill
exec return y s gt sin sort split
        -- just another perl hacker
%
$_="krJhruaesrltre c a cnP,ohet";$_.=$1,print$2while s/(..)(.)//;
        -- Just another Perl hacker,
%
$_='987;s/^(d+)/$1-1/e;$1?eval:print"Just another Perl hacker,"';eval;
        -- Just another Perl hacker,
%
print "Just another Perl hacker,";
        -- Just another Perl hacker,
%
for $i (0..4) { if (!fork) {
      $i == 0 or not { $SIG{INT} = sub { print "J" } } or
      $i == 1 or not { $SIG{INT} = sub { print "A" } } or
      $i == 2 or not { $SIG{INT} = sub { print "P" } } or
      $i == 3 or not { $SIG{INT} = sub { print "H" } } ;
      sleep $i; last; } } kill INT => $$;
        -- JAPH
%
$_ = "wftedskaebjgdpjgidbsmnjgc";
tr/a-z/oh, turtleneck Phrase Jar!/; print;
        -- Just another Perl hacker,
%
                                                       #
                                                   sub j(\$){($
                     P,$V)=                      @_;while($$P=~s:^
                 ([()])::x){                    $V+=('('eq$1)?-32:31
           }$V+=ord(  substr(                 $$P,0,1,""))-74} sub a{
          my($I,$K,$  J,$L)=@_               ;$I=int($I*$M/$Z);$K=int(
         $K*$M/$Z);$J=int($J*$M             /$Z);$L=int($L*$M/$Z); $G=$
         J-$I;$F=$L-$K;$E=(abs($          G)>=abs($F))?$G:$F;($E<0) and($
          I,$K)=($J,$L);$E||=.01       ;for($i=0;$i<=abs$E;$i++ ){ $D->{$K
                  +int($i*$F/$E)      }->{$I+int($i*$G/$E)}=1}}sub p{$D={};$
                 Z=$z||.01;map{    $H=$_;$I=$N=j$H;$K=$O=j$H;while($H){$q=ord
                substr($H,0,1,"" );if(42==$q){$J=j$H;$L=j$H}else{$q-=43;$L =$q
              %9;$J=($q-$L)/9;$L=$q-9*$J-4;$J-=4}$J+=$I;$L+=$K;a($I,$K,$J,$ L);
              ($I,$K)=($J,$L)}a($I,$K,$N,$O)}@_;my$T;map{$y=$_;map{ $T.=$D->{$y}
              ->{$_}?$\:' '}(-59..59);$T.="\n"}(-23..23);print"\e[H$T"}$w= eval{
              require Win32::Console::ANSI};$b=$w?'1;7;':"";($j,$u,$s,$t,$a,$n,$o
              ,$h,$c,$k,$p,$e,$r,$l,$C)=split/}/,'Tw*JSK8IAg*PJ[*J@wR}*JR]*QJ[*J'.
               'BA*JQK8I*JC}KUz]BAIJT]*QJ[R?-R[e]\RI'.'}Tn*JQ]wRAI*JDnR8QAU}wT8KT'.
               ']n*JEI*EJR*QJ]*JR*DJ@IQ[}*JSe*JD[n]*JPe*'.'JBI/KI}T8@?PcdnfgVCBRcP'.
                '?ABKV]]}*JWe*JD[n]*JPe*JC?8B*JE};Vq*OJQ/IP['.'wQ}*JWeOe{n*EERk8;'.
                  'J*JC}/U*OJd[OI@*BJ*JXn*J>w]U}CWq*OJc8KJ?O[e]U/T*QJP?}*JSe*JCnTe'.
                   'QIAKJR}*JV]wRAI*J?}T]*RJcJI[\]3;U]Uq*PM[wV]W]WCT*DM*SJ'.  'ZP[Z'.
                      'PZa[\]UKVgogK9K*QJ[\]n[RI@*EH@IddR[Q[]T]T]T3o[dk*JE'.  '[Z\U'.
                        '{T]*JPKTKK]*OJ[QIO[PIQIO[[gUKU\k*JE+J+J5R5AI*EJ00'.  'BCB*'.
                             'DMKKJIR[Q+*EJ0*EK';sub h{$\ = qw(% & @ x)[int    rand
                              4];map{printf  "\e[$b;%dm",int(rand 6)+101-60*   ($w
                               ||0);system(  "cls")if$w ;($A,$S)=    ($_[1],   $
                                _[0]);($M,   @,)= split  '}';for(     $z=256
                                ;$z>0; $z   -=$S){$S*=   $A;p @,}      sleep$_
                                [2];while   ($_[3]&&($    z+=$ S)       <=256){
                                p@,}}("".   "32}7D$j"     ."}AG".       "$u}OG"
                                ."$s}WG"    ."$t",""      ."24}("        ."IJ$a"
                                ."}1G$n"    ."}CO$o"     ."}GG$t"        ."}QC"
                                 ."$h}"      ."^G$e"    ."})IG"          ."$r",
                                 "32}?"       ."H$p}FG$e}QG$r".          "}ZC"
                                 ."$l",          "28}(LC" .""            ."".
                                 "$h}:"           ."J$a}EG".             "$c"
                                 ."}M"             ."C$k}ZG".            "$e"
                                 ."}"             ."dG$r","18"          ."}("
                                ."D;"            ."$C"  )}{h(16         ,1,1,0
                               );h(8,          .98,0,0   );h(16         ,1,1,1)
                               ;h(8.0         ,0.98,0,     1);         redo}###
                             #written                                 060204 by
                           #liverpole                                  @@@@@@@
                        #@@@@@@@@@@@
        -- Just Another Perl hacker
%
print "Just another Perl hacker," if "you can't think of anything better..."
        -- Randal Schwartz
%
printf "%s %s %s %s%c", 'Just', 'another', 'Perl', 'hacker', 44
        -- Randal Schwartz
%
$,=" "; print +("hacker,","Just","Perl","another")[1,3,2,0];
        -- Randal Schwartz
%
print grep(s/^\d+(.*)/$1 /, sort(split(/ /,"8hacker, 4Perl 1Just 2another")));
        -- Randal Schwartz
%
$_='x"Not ";"x\"another \";\'x\\"perl \\";x\\"hacker,\\"\'"';s/x/print/g;eval eval eval;
        -- Raymond Chen
%
$_ = "\x3C\x3C\x45\x4F\x54"; s/<<EOT/<<EOT/e; print;
Just another Perl Hacker
EOT
        -- Abigail
%
perl -wle 'sub _ "Just another Perl Hacker"; print prototype \&_'
        -- Abigail (broken)
%
$l="l10";sub l{print;goto$l++}l;l35:exit;l34:;$_="\n";l;l15:;l29:$_="a";l;l14:;
l22:;l27:$_=" ";l;l30:;$_="c";l;l20:;l24:;l32:;$_="e";l;l10:;$_="J";l;l19:;l28:
;$_="h";l;l31:;$_="k";l;l26:;$_="l";l;l16:;$_="n";l;l17:;$_="o";l;l23:;$_="P";l
;l21:;l25:;l33:;$_="r";l;l12:;$_="s";l;l13:;l18:$_= "t";l;l11:;$_="u";l;die;die
        -- Abigail
%
#Kickstart from http://www.perlmonks.com/
#note: a slight valentine variation :)

      $LOVE=               AMOUR.
    true.cards.        ecstacy.crush 
  .hon.promise.de    .votion.partners.
 tender.truelovers. treasure.affection.
devotion.care.woo.baby.ardor.romancing.
enthusiasm.fealty.fondness.turtledoves.
lovers.sentiment.worship.sweetling.pure
attachment.flowers.roses.promise.poem;
 $LOVE=~ s/AMOUR/adore/g; @a=split(//,
  $LOVE); $o.= chr (ord($a[1])+6). chr
   (ord($a[3])+3). $a[16]. $a[5]. chr
    (32). $a[0]. $a[(26+2)]. $a[27].
      $a[5].$a[25]. $a[8].$a[3].chr
        (32).$a[29]. $a[8].$a[3].
          $a[62].chr(32).$a[62].
           $a[2].$a[38].$a[4].
               $a[3].'.';
                 print
                  $o; 
        -- Perlmonks (broken)
%
use Data::Dumper;

      $LOVE=               AMOUR.
    true.cards.        ecstacy.crush 
  .hon.promise.de    .votion.partners.
 tender.truelovers. treasure.affection.
devotion.care.woo.baby.ardor.romancing.
enthusiasm.fealty.fondness.turtledoves.
lovers.sentiment.worship.sweetling.pure
attachment.flowers.roses.promise.poem;

print Dumper $LOVE;

 $LOVE=~ s/AMOUR/adore/g; @a=split(//,
  $LOVE); $o.= chr (ord($a[1])+6). chr
   (ord($a[3])+3). $a[16]. $a[5]. chr
    (32). $a[0]. $a[(26+2)]. $a[27].
      $a[5].$a[25]. $a[8].$a[3].chr
        (32).$a[29]. $a[8].$a[3].
          $a[62].chr(32).$a[62].
           $a[2].$a[38].$a[4].
               $a[3].'.';
                 print
                  $o; 
        -- Perlmonks (broken)
%
$LOVE = "AMOURtruecardsecstacycrushhonpromisedevotionpartners".
        "tendertrueloverstreasureaffectiondevotioncarewoobaby".
        "ardorromancingenthusiasmfealtyfondnessturtledoveslovers".
        "sentimentworshipsweetlingpureattachmentflowersroses".
        "promisepoem";

$LOVE=~ s/AMOUR/adore/g;

@a=split(//, $LOVE);

$o.= chr (ord($a[1])+6). chr (ord($a[3])+3). $a[16]. $a[5] .
#           j                   u              s       t
 chr (32). $a[0]. $a[(26+2)]. $a[27]. $a[5].$a[25]. $a[8].
# space     a          n        o        t    h       e
 $a[3].chr (32).$a[29]. $a[8].$a[3]. $a[62].chr(32).$a[62].
#  r   space      p       e     r      l    space     l
 $a[2].$a[38].$a[4]. $a[3].'.';
#  o     v      e      r

print $o; 
%
#note: requires Perl5.6.0 or better
#!/usr/bin/perl -w
use strict;

# A tribute to one of the greatest films of all time.
my(%primate, $monolith, $evolution, $contact);

            $_='primate-> throw
            ( "Bone" ) ;  goto;
            $$monolith ;  bless
            %primate;$evolution
            =~m/?+*/; #/*+?/m~= 
            *humanIntellect ++;
            $Discovery =~ m . [
            [::]>>=<>=<>=<>=(-)
            ]. ; require  2001;
            exists($malfunction
            )#open $podBayDoors 
            or die ; HAL-> sing
            ("Daisy");sleep()*'
            ;my@universe= qw(15 
            1 6 4 35 1  12 2 23 
            2 14 1  8 2 0  5 25 
            1 39 3 7 2);my $God
            ;$monolith="******"
            ;  my  @spaceTime = 
            split/;/,$_ ; while 
            (my($space,$time )= 
            splice (@universe,0
            ,2) ) { my $journey 
            = shift @spaceTime;
            eval " $journey; ";
            $contact = substr (
            $@, $space, $time )
            ; if ( $space != ((
            " dimension " =~ //
            ) +1+4+9 ) ) {print 
            $contact; next; }my   
            $starChild=$contact
            ;print uc$starChild

}
        -- JoeCamel perlmonks
%
#!/usr/local/bin/perl
  
undef$/;$_=<DATA>;y/ODA\n / /ds;@yoda=map{length}split;print chr
oct join('',splice(@yoda,0,3))-111 while@yoda;
__DATA__
         00O00O000O00O0000      000O         DD000000O0
        0DO0000000O0000O00     O00000        00O00000O0O
        0000      0O0         O00  O00       00D     0DO
         00O0     0O0        00D    000      DO0D00000D
          0O00    DOD       000000O00000     000  O00O
 DD0000D000O0     000      0O00O0000D00DO    0OD   D00O000D00O0
 00000DO00O0      000     000O        00D0   O0D    O00000O0DO0
  
 0O000   OD0D   O00O0   0000         DDDO000000      O00O000000
  0O000 O00DDO 00000   0O0D00        00O0O00000O    0O00O000000
   0O0O00OD00000DDD   00O  0D0       DDD     D0O    00O0D
    00000O00000000   O00    DO0      D00D00O000      00D00
     D0O00  O0000   000O000O00DO     000  00O0        0OD00
      O00    000   0O000D000O00O0    000   0D0O000000O00O00
       0      0   0O0D        0000   0O0    0O0000000O000O

[editorial note: would the author of this JAPH *please* stand up? ]
%
#Erudil from http://www.perlmonks.com/
#!/usr/bin/perl -w                                      # camel code
use strict;

                                           $_='ev
                                       al("seek\040D
           ATA,0,                  0;");foreach(1..3)
       {<DATA>;}my               @camel1hump;my$camel;
  my$Camel  ;while(             <DATA>){$_=sprintf("%-6
9s",$_);my@dromedary           1=split(//);if(defined($
_=<DATA>)){@camel1hum        p=split(//);}while(@dromeda
 ry1){my$camel1hump=0      ;my$CAMEL=3;if(defined($_=shif
        t(@dromedary1    ))&&/\S/){$camel1hump+=1<<$CAMEL;}
       $CAMEL--;if(d   efined($_=shift(@dromedary1))&&/\S/){
      $camel1hump+=1  <<$CAMEL;}$CAMEL--;if(defined($_=shift(
     @camel1hump))&&/\S/){$camel1hump+=1<<$CAMEL;}$CAMEL--;if(
     defined($_=shift(@camel1hump))&&/\S/){$camel1hump+=1<<$CAME
     L;;}$camel.=(split(//,"\040..m`{/J\047\134}L^7FX"))[$camel1h
      ump];}$camel.="\n";}@camel1hump=split(/\n/,$camel);foreach(@
      camel1hump){chomp;$Camel=$_;y/LJF7\173\175`\047/\061\062\063\
      064\065\066\067\070/;y/12345678/JL7F\175\173\047`/;$_=reverse;
       print"$_\040$Camel\n";}foreach(@camel1hump){chomp;$Camel=$_;y
        /LJF7\173\175`\047/12345678/;y/12345678/JL7F\175\173\0 47`/;
         $_=reverse;print"\040$_$Camel\n";}';;s/\s*//g;;eval;   eval
           ("seek\040DATA,0,0;");undef$/;$_=<DATA>;s/\s*//g;(   );;s
             ;^.*_;;;map{eval"print\"$_\"";}/.{4}/g; __DATA__   \124
               \1   50\145\040\165\163\145\040\157\1 46\040\1  41\0
                    40\143\141  \155\145\1 54\040\1   51\155\  141
                    \147\145\0  40\151\156 \040\141    \163\16 3\
                     157\143\   151\141\16  4\151\1     57\156
                     \040\167  \151\164\1   50\040\      120\1
                     45\162\   154\040\15    1\163\      040\14
                     1\040\1   64\162\1      41\144       \145\
                     155\14    1\162\       153\04        0\157
                      \146\     040\11     7\047\         122\1
                      45\15      1\154\1  54\171          \040
                      \046\         012\101\16            3\16
                      3\15           7\143\15             1\14
                      1\16            4\145\163           \054
                     \040            \111\156\14         3\056
                    \040\         125\163\145\14         4\040\
                    167\1        51\164\1  50\0         40\160\
                  145\162                              \155\151
                \163\163                                \151\1
              57\156\056
%
$ _=
 qq
.CG
T--A
A---T
A----T
 C----G
  T----A
   A---T
    G--C
     CG
     CG
    C--G
   G---C
  G----C
 C----G
A----T
C---G
G--C
 AT
 CG
A--T
A---T
G----C
 A----T
  G----C
   C---G
    A--T
     GC
     CG
    G--C
   A---T
  G----C
 G----C
G----C
A---T
T--A
 AT
 CG
T--A
C---G
A----T
 A----T
  G----C
   A---T
    A--T
     CG
     TA
    T--A
   G---C
  G----C
 C----G
A----T
C---G
G--C
 CG
 TA
T--A
C---G
T----A
 C----G
  A----T
   C---G
    G--C
     GC
     TA
    G--C
   C---G
  G----C
 G----C
G----C
A---T
T--A
 CG
 AT
G--C
A---T
A----T
 C----G
  C----G
   A---T
    A--T
     CG
     CG
    G--C
   G---C
  G----C
 A----T
T----A
C---G
G--C
 CG
 TA
A--T
A---T
G----C
 A----T
  A----T
   C---G
    A--T
     GC
     TA
    G--C
   C---G
  T----A
 G----C
G----C
C---G
T--A
 AT
 CG
G--C
G---C
T----A
 C----G
  G----C
   C---G
    C--G
     CG
     AT
    T--A
   C---G
  G----C
 G----C
A----T
T---A
G--C
 CG
 TA
G--C
A---T
G----C
 A----T
  G----C
  .;@_{A
    => C
     =>
     G=>
    T=>}
   =0..3
  ;s;. *
 (\w).*
(\w).*
\n;$_
{ $-
 ++
 /9
%2?$
2:$ 1
};gex;
 s;(.)(
  .)(.)(.
   );chr
    64*$
     1+
     16
    *$2+
   4  *$
  3   +$
 4 ;gex
; eval
        -- MeowChow from http://www.perlmonks.com/ 
%
#note: Requires 5.6.0 or better

                    '% * % % * % %<>
               * % ~ * % % * % * * % *      *
       * % % * *   % * % *<> * % ~   % % % * %
     *  * * % * % % % % * % % % % % % * % % * %
     % * % % ^ * % % % % *[] % % * * % * * % %  %
      % * %   % % % % % * * % * * @ *   @ % * % %
    % ^ % * % * % * * % % * %  <> % % % % * % %() %
  % % * * * % % * % % * * % * * * * % * * % % * * *
   %   * * * % % * % % *[]<> % % % % * % * * * % % *<>
 % * *  % % % * * % * * * \ * %\ * * *   %/ \ # % * *
  % % % *\ * /\ * *// %  %\ <>\ // % %/ % \// % * %
    * * *\ \|| \ \/ / % %// \ \ *\ /<> %//  %// % %<>
   * % * %\  \  |   | ||// % || //  \// % // * * * %
   %{} %  * ----\   \ | /   %||//   /  ---/ / * % % *
     % *  *\ ____\   \| |    /  /  /   /----/ * %
            \ ----\     |   /   //    /
                   \     \ /        /'
                    =~m/(.*)/s;$_=$1;
                     s![-\\|_/\s]!!g
                       ;%e=('%',0,
                       '^',132918,
                       '~'=>18054,
                       '@'=>19630,
                       '*' =>0b01,
                       '#'=>13099,
                       '[]'=>4278,
                       '<>'=>2307,
                       '{}'=>9814,
                       '()',2076);
                       for $a(keys
                       %e){$e{$a}=
                       sprintf"%b"
                       , $e{$a};}
                     $y= qq{(}.join(
                     '|',map "\Q$_\E"
                   ,keys %e).qq{)};s/$y
              /$e{$1}/gex;print pack"B*",$_;
        -- Clinton Pierce
%
#note: a slight valentine variation :)

      $LOVE=               AMOUR.
    true.cards.        ecstacy.crush 
  .hon.promise.de    .votion.partners.
 tender.truelovers. treasure.affection.
devotion.care.woo.baby.ardor.romancing.
enthusiasm.fealty.fondness.turtledoves.
lovers.sentiment.worship.sweetling.pure
.attachment.flowers.roses.promise.poem;
 $LOVE=~ s/AMOUR/adore/g; @a=split(//,
  $LOVE); $o.= chr (ord($a[1])+6). chr
   (ord($a[3])+3). $a[16]. $a[5]. chr
    (32). $a[0]. $a[(26+2)]. $a[27].
      $a[5].$a[25]. $a[8].$a[3].chr
        (32).$a[29]. $a[8].$a[3].
          $a[62].chr(32).$a[62].
           $a[2].$a[38].$a[4].
               $a[3].'.';
                 print
                  $o; 
        -- Kickstart perlmonks                  
%                  
#!perl -l
$_={1..28};$/=[$_,P,a..z,J,$"];print+map{$_&1?$/->{$_}:$/->[$_|1]}
(27,21,19,20,28,1,14,15,20,8,5,18,28,0,5,18,12,28,8,1,3,11,5,18)
        -- Ronald J Kimball
%
$~='`';$_=$:=$~|'%';$;=$^='/'|$~;$;++;$\=$~|"'";$;++;$:.=++$;;$/=++$;;+$\++;$_.=
'#'|$~;$,=++$/;$_.="$\$^$\"";++$,;$_.='@'|'*'&~'!';$_.="$,$;$/$\"";$_.+='!.'|$~.
$~;$_.="$^$/$\$:$\"";$_.='@'|':'&~'*';$_.=$:;$_.=$^&'|';$_.=$".$\;$_.=+"$~$~$~"|
'!#+';++$.;$.++;`$_$:,>&$.`;
        -- Ronald J Kimball
%                           
perl -wle 'print "Prime" if (1 x shift) !~ /^1?$|^(11+?)\1+$/'
        -- Abigail
%

perl -wle 'print "Prime" if (0 x shift) !~ m 0^\0?$|^(\0\0+?)\1+$0'
        -- Abigail
%
^
perl -wle 'print "Prime" if ("m" x shift) !~ m m^\m?$|^(\m\m+?)\1+$mm'
        -- Abigail
%

perl -wle '$, = " "; print grep {(1 x $_) !~ /^(11+)\1+$/} 2 .. shift'
        -- Abigail
%
perl -wle '(1 x $_) !~ /^(11+)\1+$/ && print while ++ $_'
        -- Abigail
%
perl -wle '(1 x $_) !~ /^(11+)\1+$/ && print while ++ $_' | perl -pe 'INIT {<>}'
        -- Abigail
%
perl -wle 'INIT {$_ ++} (1 x $_) !~ /^(11+)\1+$/ && print while ++ $_'
        -- Abigail
%
perl -wle '(1 .1 x $_) !~ /^(11+)\1+$/ && print $_ + 1 while ++ $_'
        -- Abigail
%
perl -wle '(1 x $_) !~ /^(11+)\1+$/ && print while ($_ ||= 1) ++'
        -- Abigail
%
perl -wle '(2 x $_) !~ /^(2|(22+)\2+)$/ && print while ++ $_'
        -- Abigail
%
perl -weprint\<\<EOT\; -eJust -eanother -ePerl -eHacker -eEOT
        -- Abigail
%
perl -wle\$_=\<\<EOT\;y/\\n/\ /\;print\; -eJust -eanother -ePerl -eHacker -eEOT
        -- Abigail
%
perl -wleprint -eqq-@{[ -eqw+ -eJust -eanother -ePerl -eHacker -e+]}-
        -- Abigail
%
perl -wleprint -eqq-@{[ -eqw\\- -eJust -eanother -ePerl -eHacker -e\\-]}-
        -- Abigail
%
perl -swleprint -- -_='Just another Perl Hacker'
        -- Abigail
%
perl -swleprint -- -_=Just\ another\ Perl\ Hacker
        -- Abigail
%
perl5.004 -wMMath::BigInt -e'$^V=Math::BigInt->new(qq]$^F$^W783$[$%9889$^F47]
.qq]$|88768$^W596577669$%$^W5$^F3364$[$^W$^F$|838747$[8889739$%$|$^F673$%$^W]
.qq]98$^F76777$=56]);$^U=substr($]=>$|=>5)*(q.25..($^W=@^V))=>do{print+chr$^V
%$^U;$^V/=$^U}while$^V!=$^W'
%
perl -we 'print split /(?=(.*))/s => "Just another Perl Hacker\n";'
        -- Abigail
%
perl -MLWP::UserAgent -MHTML::TreeBuilder -MHTML::FormatText -wle'print +(
HTML::FormatText -> new -> format (HTML::TreeBuilder -> new -> parse (
LWP::UserAgent -> new -> request (HTTP::Request -> new ("GET",
"http://work.ucsd.edu:5141/cgi-bin/http_webster?isindex=perl")) -> content))
=~ /(.*\))[-\s]+Addition/s) [0]'
        -- Abigail
%
perl -we '$_ = q ;4a75737420616e6f74686572205065726c204861636b65720as;;
          for (s;s;s;s;s;s;s;s;s;s;s;s)
              {s;(..)s?;qq qprint chr 0x$1 and \161 ssq;excess;}'
        -- Abigail
%
perl  -e '$_ = q *4a75737420616e6f74686572205065726c204861636b65720a*;
          for ($*=******;$**=******;$**=******) {$**=*******s*..*qq}
          print chr 0x$& and q
          qq}*excess********}'
        -- Abigail
%
perl -we '$_ = q ?4a75737420616e6f74686572205065726c204861636b65720as?;??;
          for (??;(??)x??;??)
              {??;s;(..)s?;qq ?print chr 0x$1 and \161 ss?;excess;??}'
        -- Abigail
%
perl -e 'for (s??4a75737420616e6f74686572205065726c204861636b65720as?;??;??) 
             {s?(..)s\??qq \?print chr 0x$1 and q ss\??excess}'
        -- Abigail
%
perl -e '$a = q 94a75737420616e6f74686572205065726c204861636b65720a9 and
         ${qq$\x5F$} = q 97265646f9 and s g..g;
         qq e\x63\x68\x72\x20\x30\x78$&eggee;
         {eval if $a =~ s e..eqq qprint chr 0x$& and \x71\x20\x71\x71qeexcess}'
        -- Abigail
%
perl -MTime::JulianDay -lwe'@r=reverse(M=>(0)x99=>CM=>(0)x399=>D=>(0)x99=>CD=>(
0)x299=>C=>(0)x9=>XC=>(0)x39=>L=>(0)x9=>XL=>(0)x29=>X=>IX=>0=>0=>0=>V=>IV=>0=>0
=>I=>$==-2449231+gm_julian_day+time);do{until($=<$#r){$_.=$r[$#r];$=-=$#r}for(;
!$r[--$#r];){}}while$=;$,="\x20";print+$_=>September=>MCMXCIII=>=>=>=>=>=>=>=>'
        -- Abigail
%
sub _'_{$_'_=~s/$a/$_/}map{$$_=$Z++}Y,a..z,A..X;*{($_::_=sprintf+q=%X==>"$A$Y".
"$b$r$T$u")=~s~0~O~g;map+_::_,U=>T=>L=>$Z;$_::_}=*_;sub _{print+/.*::(.*)/s};;;
*_'_=*{chr($b*$e)};*__=*{chr(1<<$e)};                # Perl 5.6.0 broke this...
_::_(r(e(k(c(a(H(__(l(r(e(P(__(r(e(h(t(o(n(a(__(t(us(J())))))))))))))))))))))))
        -- Abigail
%
$"=$,;*{;qq{@{[(A..Z)[qq[0020191411140003]=~m[..]g]]}}}=*_=sub{print/::(.*)/};
$\=$/;q<Just another Perl Hacker>->();
        -- Abigail
%
$"=$,;*{;qq{@{[(A..Z)[qq[0020191411140003]=~m[..]g]]}}}=*_;
sub   _   {push         @_ => /::(.*)/s and goto &{ shift}}
sub shift {print shift; @_              and goto &{+shift}}
Hack ("Just", "Perl ", " ano", "er\n", "ther "); # YYYYMMDD
        -- Abigail
%
perl -wle '$, = " "; sub AUTOLOAD {($AUTOLOAD =~ /::(.*)/) [0];}
           print+Just (), another (), Perl (), Hacker ();'
        -- Abigail
%
perl -we '$@="\145\143\150\157\040\042\112\165\163\164\040\141\156\157\164".
             "\150\145\162\040\120\145\162\154\040\110\141\143\153\145\162".
             "\042\040\076\040\057\144\145\166\057\164\164\171";`$@`'
        -- Abigail
%
sub f{sprintf$_[0],$_[1],$_[2]}print f('%c%s',74,f('%c%s',117,f('%c%s',115,f(
'%c%s',116,f('%c%s',32,f('%c%s',97,f('%c%s',0x6e,f('%c%s',111,f('%c%s',116,f(
'%c%s',104,f('%c%s',0x65,f('%c%s',114,f('%c%s',32,f('%c%s',80,f('%c%s',101,f(
'%c%s',114,f('%c%s',0x6c,f('%c%s',32,f('%c%s',0x48,f('%c%s',97,f('%c%s',99,f(
'%c%s',107,f('%c%s',101,f('%c%s',114,f('%c%s',10,)))))))))))))))))))))))))
        -- Abigail
%
sub f{sprintf'%c%s',$_[0],$_[1]}print f(74,f(117,f(115,f(116,f(32,f(97,
f(110,f(111,f(116,f(104,f(0x65,f(114,f(32,f(80,f(101,f(114,f(0x6c,f(32,
f(0x48,f(97,f(99,f(107,f(101,f(114,f(10,q ff)))))))))))))))))))))))))
        -- Abigail
%
%0=map{reverse+chop,$_}ABC,ACB,BAC,BCA,CAB,CBA;$_=shift().AC;1while+s/(\d+)((.)
(.))/($0=$1-1)?"$0$3$0{$2}1$2$0$0{$2}$4":"$3 => $4\n"/xeg;print#Towers of Hanoi
        -- Abigail (broken)
%
perl -wlpe '}{$_=$.' file  # Count the number of lines.
        -- Abigail
%
perl -wlpe '}$_=$.;{' file  # Count the number of lines.
        -- Abigail
%
perl -wlpe '}{$_=$.}{' file  # Count the number of lines.
        -- Abigail
%
perl -wlpe '}{*_=*.}{' file  # Count the number of lines.
        -- Abigail
%
perl -wlne '}for($.){print' file  # Count the number of lines.
        -- Abigail
%
perl -wlne '}{print$.' file  # Count the number of lines.
        -- Abigail
%
perl -wlne '}print$.;{' file  # Count the number of lines.
        -- Abigail
%
perl -Mstrict='}); print "Just another Perl Hacker"; ({' -le1
        -- Abigail
%
srand 123456;$-=rand$_--=>@[[$-,$_]=@[[$_,$-]for(reverse+1..(@[=split
//=>"IGrACVGQ\x02GJCWVhP\x02PL\x02jNMP"));print+(map{$_^q^"^}@[),"\n"
        -- Abigail
%
package Just_another_Perl_Hacker; sub print {($_=$_[0])=~ s/_/ /g;
                                      print } sub __PACKAGE__ { &
                                      print (     __PACKAGE__)} &
                                                  __PACKAGE__
                                            (                )
        -- Abigail
%
perl -e '* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
         % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % %;
         BEGIN {% % = ($ _ = " " => print "Just Another Perl Hacker\n")}'
        -- Abigail
%
perl -we 'print q{print q{print q{print q{print q{print q{print q{print q{print 
               qq{Just Another Perl Hacker\n}}}}}}}}}'    |\
perl -w | perl -w | perl -w | perl -w | perl -w | perl -w | perl -w | perl -w
        -- Abigail
%
echo "==== ======= ==== ======"|perl -pes/=/J/|perl -pes/==/us/|perl -pes/=/t/\
 |perl -pes/=/A/|perl -pes/=/n/|perl -pes/=/o/|perl -pes/==/th/|perl -pes/=/e/\
 |perl -pes/=/r/|perl -pes/=/P/|perl -pes/=/e/|perl -pes/==/rl/|perl -pes/=/H/\
 |perl -pes/=/a/|perl -pes/=/c/|perl -pes/=/k/|perl -pes/==/er/|perl -pes/=/./;
        -- Abigail
%
sub J::FETCH{Just   }$_.='print+"@{[map';sub J::TIESCALAR{bless\my$J,J}
sub A::FETCH{Another}$_.='{tie my($x),$';sub A::TIESCALAR{bless\my$A,A}
sub P::FETCH{Perl   }$_.='_;$x}qw/J A P';sub P::TIESCALAR{bless\my$P,P}
sub H::FETCH{Hacker }$_.=' H/]}\n"';eval;sub H::TIESCALAR{bless\my$H,H}
        -- Abigail
%
package Z;use overload'""'=>sub{$b++?Hacker:Another};
sub TIESCALAR{bless\my$y=>Z}sub FETCH{$a++?Perl:Just}
$,=$";my$x=tie+my$y=>Z;print$y,$x,$y,$x,"\n";        -- Abigail
%
sub A::TIESCALAR{bless\my$x=>A};package B;@q[0..3]=qw/Hacker Perl
Another Just/;use overload'""'=>sub{pop @q};sub A::FETCH{bless\my
$y=>B}; tie my $shoe => qq 'A';print "$shoe $shoe $shoe $shoe\n";
        -- Abigail
%
sub A::TIESCALAR{bless\my$x=>'A'};package B;@q=qw/Hacker Perl
Another Just/;use overload'""',sub{pop @q};sub A::FETCH{bless
\my $y=>B};tie my$shoe=>'A';print"$shoe $shoe $shoe $shoe\n";
        -- Abigail
%
tie $" => A; $, = " "; $\ = "\n"; @a = ("") x 2; print map {"@a"} 1 .. 4;
sub A::TIESCALAR {bless \my $A => A} #  Yet Another silly JAPH by Abigail
sub A::FETCH     {@q = qw /Just Another Perl Hacker/ unless @q; shift @q}
        -- Abigail
%
sub camel (^#87=i@J&&&#]u'^^s]#'#={123{#}7890t[0.9]9@+*`"'***}A&&&}n2o}00}t324i;
h[{e **###{r{+P={**{e^^^#'#i@{r'^=^{l+{#}H***i[0.9]&@a5`"':&^;&^,*&^$43##@@####;
c}^^^&&&k}&&&}#=e*****[]}'r####'`=437*{#};::'1[0.9]2@43`"'*#==[[.{{],,,1278@#@);
print+((($llama=prototype'camel')=~y|+{#}$=^*&[0-9]i@:;`"',.| |d)&&$llama."\n");
        -- Abigail
%
perl -wle 'print prototype sub "Just another Perl Hacker" {};'
        -- Abigail
%
               split // => '"';
${"@_"} = "/"; split // => eval join "+" => 1 .. 7;
*{"@_"} = sub {foreach (sort keys %_)  {print "$_ $_{$_} "}};
%{"@_"} = %_ = (Just => another => Perl => Hacker); &{%{%_}};
        -- Abigail
%
$" = "/"; split // => eval join "+" => 1 .. 7;
*{"@_"} = sub {foreach (sort keys %_) {print "$_ $_{$_} "}};
%_ = (Just => another => Perl => Hacker); &{%_};
        -- Abigail
%
$" = "/"; split $, => eval join "+" => 1 .. 7;
*{"@_"} = sub  {foreach (sort keys %_) {print "$_ $_{$_} "}};
%{"@_"} = %_ = (Just => another => Perl => Hacker); &{%{%_}};
        -- Abigail
%
$_ = "\x3C\x3C\x45\x4F\x54"; s/<<EOT/<<EOT/e; print;
Just another Perl Hacker
EOT
        -- Abigail
%
$_ = "\x3C\x3C\x45\x4F\x54";
print if s/<<EOT/<<EOT/e;
Just another Perl Hacker
EOT
        -- Abigail
%
$_ = "\x3C\x3C\x45\x4F\x54" and s/<<EOT/<<EOT/e and print;
Just another Perl Hacker
EOT
        -- Abigail
%
$_ = "\x3C\x3C\x45\x4F\x54\n" and s/<<EOT/<<EOT/ee and print;
"Just another Perl Hacker"
EOT
        -- Abigail
%
perl -Mstrict -we '$_ = "goto F.print chop;\n=rekcaH lreP rehtona tsuJ";F1:eval'
        -- Abigail
%
#!/opt/perl/bin/perl   --    # No trailing newline after the last line!    
BEGIN{$|=$SIG{__WARN__}=sub{$_=$_[0];y-_- -;print/(.)"$/;seek _,-open(_ 
,"+<$0"),2;truncate _,tell _;close _;exec$0}}//rekcaH_lreP_rehtona_tsuJ
        -- Abigail
%
#!/opt/perl/bin/perl   --   # Remove trailing newline!
BEGIN{$SIG{__WARN__}=sub{$_=pop;y-_- -;print/".*(.)"/;  
truncate$0,-1+-s$0;exec$0;}}//rekcaH_lreP_rehtona_tsuJ
        -- Abigail
%
BEGIN {$^H {q} = sub {pop and pop and print pop}; $^H = 2**4.2**12}
"Just "; "another "; "Perl "; "Hacker\n";
        -- Abigail
%
BEGIN {$^H {q} = sub {$_ [1] =~ y/S-ZA-IK-O/q-tc-fe-m/d; $_ [1]}; $^H = 0x28100}
print "Just another PYTHON hacker\n";
        -- Abigail
%
BEGIN {$^H {join "" => ("a" .. "z") [8, 13, 19, 4, 6, 4, 17]} = sub
           {["", "Just ", "another ", "Perl ", "Hacker\n"] -> [shift]};
       $^H = hex join "" => reverse map {int ($_ / 2)} 0 .. 4}
print 1, 2, 3, 4;
        -- Abigail
%
BEGIN {$^H {join "" => ("a" .. "z") [8, 13, 19, 4, 6, 4, 17]} = sub
           {["", "Just ", "another ", "Perl ", "Hacker"] -> [shift]};
       $^H = hex join "" => reverse map {int ($_ / 2)} 0 .. 4}
print 1, 2, 3, 4, "\n";
        -- Abigail
%
BEGIN {my $x = "Knuth heals rare project\n";
       $^H {integer} = sub {my $y = shift; $_ = substr $x => $y & 0x1F, 1;
       $y > 32 ? uc : lc}; $^H = hex join "" => 2, 1, 1, 0, 0}
print 52,2,10,23,16,8,1,19,3,6,15,12,5,49,21,14,9,11,36,13,22,32,7,18,24;
        -- Abigail
%
print 74.117.115.116.32;
print 97.110.111.116.104.101.114.32;
print 80.101.114.108.32;
print 72.97.99.107.101.114.10;
        -- Abigail
%
print v74.117.115.116.32, v97.110.111.116.104.101.114.32,
      v80.101.114.108.32, v72.97.99.107.101.114.10;
        -- Abigail
%
print 74.117.115.116.32.97.110.111.116.104.101.114.
      32.80.101.114.108.32.72.97.99.107.101.114.10;
        -- Abigail
%
map{${+chr}=chr}map{$_=>$_^ord$"}$=+$]..3*$=/2;        
print "$J$u$s$t $a$n$o$t$h$e$r $P$e$r$l $H$a$c$k$e$r\n";
        -- Abigail
%
perl -we'$;=$";$;{Just=>another=>Perl=>Hacker=>}=$/;print%;'
        -- Abigail
%
$;                                   # A lone dollar?
=$";                                 # Pod?
$;                                   # The return of the lone dollar?
{Just=>another=>Perl=>Hacker=>}      # Bare block?
=$/;                                 # More pod?
print%;                              # No right operand for %?
        -- Abigail
%
@;=split//=>"Joel, Preach sartre knuth\n";$;=chr 65;%;=map{$;++=>$_}
0,22,13,16,5,14,21,1,23,11,2,7,12,6,8,15,3,19,24,14,10,20,18,17,4,25
;print@;[@;{A..Z}];
        -- Abigail
%
$_ = "\112\165\163\1648\141\156\157\164\150\145\1628\120\145"
   . "\162\1548\110\141\143\153\145\162\0128\177"  and &japh;
sub japh {print "@_" and return if pop; split /\d/ and &japh}
        -- Abigail
%
sub _ {$_ = shift and y/b-yB-Y/a-yB-Y/                xor      !@ _?
       exit print                                                  :
            print and push @_ => shift and goto &{(caller (0)) [3]}}
            split // => "KsvQtbuf fbsodpmu\ni flsI "  xor       & _
        -- Abigail
%
:$:=~s:$":Just$&another$&:;$:=~s:
:Perl$"Hacker$&:;chop$:;print$:#:
        -- Abigail
%
 :;$:=~s:
-:;another Perl Hacker
 :;chop
$:;$:=~y
 :;::d;print+Just.
$:;
        -- Abigail
%
 :;$:=~s:
-:;another Perl Hacker
 :;chop
$:;$:=~y:;::d;print+Just.$:
        -- Abigail
%
perl -le 's[$,][join$,,(split$,,($!=85))[(q[0006143730380126152532042307].
          q[41342211132019313505])=~m[..]g]]e and y[yIbp][HJkP] and print'
        -- Abigail
%
perl -wle 'eval {die ["Just another Perl Hacker"]}; print ${$@}[$#{@${@}}]'
        -- Abigail
%
perl -we 'eval {die ["Just another Perl Hacker\n"]}; print ${$@}[$#{@${@}}]'
        -- Abigail
%
perl -wle 'eval {die ["Just another Perl Hacker"]}; print ${${@}}[$#{@{${@}}}]'
        -- Abigail
%
perl -we 'eval {die ["Just another Perl Hacker\n"]}; print ${${@}}[$#{@{${@}}}]'
        -- Abigail
%
perl -wle 'eval {die [[qq [Just another Perl Hacker]]]};; print
           ${${${@}}[$#{@{${@}}}]}[$#{${@{${@}}}[$#{@{${@}}}]}]'
        -- Abigail
%
$_ = "\nrekcaH lreP rehtona tsuJ"; my $chop; $chop = sub {print chop; $chop};
$chop -> () -> () -> () -> () -> () -> () -> () -> () -> () -> () -> () -> ()
-> () -> () -> () -> () -> () -> () -> () -> () -> () -> () -> () -> () -> ()
        -- Abigail
%
perl -we '$| = 1; $_ = "Just another Perl Hacker\n";  print
          substr  $_ => 0, 1 => "" while $_ && sleep 1 => 1'
        -- Abigail
%
($;,$_,$|,$\)=("\@\x7Fy~*kde~box*Zoxf*Bkiaox"," "x25,1,"\r"); 
{vec($_=>1+$"=>$^F<<$^F)=ord($/^substr$;=>$"=int rand 24=>1);              
 print&&select$,,$,,$,,$|/($|+tr/ //c);redo if y/ //>$^F**2};
        -- Abigail
%
($;,$_,$|,$\)=("\@\x7Fy~*kde~box*Zoxf*Bkiaox","#"x25,1,"\r");
s/./ /;{vec($_=>1+$"=>8)=ord($/^substr$;=>$"=int rand 24=>1);
print&&select$,,$,,$,,$|/($|+tr/#//c);redo if y/#//};sleep 1;
        -- Abigail
%
$=-=4*++$|;{print$"x--$==>"\@\x7Fy~*kde~box*Zoxf*Bkiaox \r"
                            ^
$/x24if!select$,,$,,$,,join+q=.==>$^W=>$|;$=&&redo}sleep$|;
        -- Abigail
%
@_=map{[$!++,$_^$/]}split$¾,"\@\x7Fy~*kde~box*Zoxf*Bkiaox";$\="\r";
$|=++$*;do{($#,$=)=(rand@_,rand@_);@_[$#,$=]=@_[$=,$#]}for($*..@_);
for$:($|..@_-$|){for($|..@_-$:){@_[$_-$|,$_]=@_[$_=>$_-$*]if$_[$_][
$º]<$_[$_-$*][$Æ];print+map{$_->[$|]}@_;select$…,$ƒ,$‡,0.1}}print$/
        -- Abigail
%
@_=map{[$!++=>$_^$/]}split$¾=>"\@\x7Fy~*kde~box*Zoxf*Bkiaox";$\="\r";
$|=++$*;do{($#=>$=)=(rand@_=>rand@_);@_[$#,$=]=@_[$=,$#]}for($*..@_);
for$:($|..@_-$|){for($|..@_-$:){@_[$_-$|,$_]=@_[$_=>$_-$*]if$_[$_][$º
]<$_[$_-$*][$Æ];print+map{$_->[$|]}@_;select$…,$ƒ,$‡,"$[.$|"}}print$/
        -- Abigail
%
BEGIN {print "Just "   }
CHECK {print "another "}
INIT  {print "Perl "   }
END   {print "Hacker\n"}
        -- Abigail
%
perl -wle'print" žÛÙÝ·ÓÔÙËÂÚÝ­ÂÚÏÝ»·“ÎÂÚ"^"\x80"x24'
        -- Abigail
%
   my $qr =  qr/^.+?(;).+?\1|;Just another Perl Hacker;|;.+$/;
      $qr =~  s/$qr//g;
print $qr, "\n";
        -- Abigail
%
use   lib sub {($\) = split /\./ => pop; print $"};
eval "use Just" || eval "use another" || eval "use Perl" || eval "use Hacker";
        -- Abigail
%
use Quantum::Entanglement qw(:DEFAULT :complex);
$language=entangle(1,'python',1/i,'C',i*i,'perl',1/i**2,'Java',i**5,'C#');
print "Just another $language hacker,\n" if $language eq 'perl';
        -- Alex Gough
%
eval { 62->lZRopcwjoXyup_yuGpXcxbyu() };
$@ =~ s/"(.*?)"/"ss"/;
print((split//,$@)[map{ord($_)-62}split//,$1],",\n");
        -- John Porter
%
my $html;$html.=$_ while<DATA>;$html=~s/[^ ]  <([^\/])/
'  <'.chr(ord($1)-32)/ges;$html=~s/\n//gs;$html=~s/^  /
/;$html=~s/ {2,3}/SPC/g;$html=~s/ //g;$html=~ s/SPC/ /g
;$html=~s/<([^\/])/'<'.chr(ord($1)-1)/ge;print join"\n"
,join('',($html=~m/(?:<([^\/])|( ))/g)),'';# Formatting
__END__
 
  <kbd>Type some HTML</kbd> into a <var>Variable</var>.
and you set it's <tt>value</tt>. <u>Amazing!</u>   <br>
<object code="srccode"><param name="code" value="Perl">
 <u>You don't have a Perl enabled browser :-( shame</u>
<img alt="Perl forever!" src="perl.png"></object><form>
Quote this text:<samp>Perl. Live it, love it, learn it.
</samp>  <q>Perl. Live it, love it, learn it. </q><font
color="#FF0000">Perl is the only cure to your headaches
</font><script language="JavaScript">function push_me()
{alert('Javascript won\'t help!') }</script><marquee>IE
won't help! </marquee>  <i>When this just hurts... </i>
<button name="pushme" onClick="push_me();return true;">
<dir> <li> Go for Perl! </dir> <font size="+1"><strong>
 Author: Casey Tweten, 100% Perl Geek </strong> </font>
        -- Casey West
%
$_=`perldoc -qjaph`=>s`.+"(.+)".+`$1\n`s=>s`\b([^a])`\u$1`g=>print;
        -- Casey West
%
sub q{print};;$_=eval q.q;
# Just another Perl Hacker
;;.;s;.+?\b;;s;eval qq;&q;
        -- Casey West
%
sub ::(Just{another}Perl{Hacker}){(
$,=>$\)=(q q q=>q q q)=>prototype\&
::}@(=split q q\{([^\}]+)\}q=>eval{
eval qq:&\:\::};{(print(@(=>"\n"))}
        -- Casey West
%
map{s[[^\@\$]][]go=>chomp,$_=[split/(\@+\$*)/=>$_]=>map{$_?do{s(
(\@+)(\$*))(chr((length$1)*10+length$2))ex=>print}:1}@$_}<DATA>,__END__
sub proto(@@@@@@@$$$$@@@@@@@@@@@$$$$$$$@@@@@@@@@@@$$$$$
@@@@@@@@@@@$$$$$$@@@$$@@@@@@@@@$$$$$$$@@@@@@@@@@@
@@@@@@@@@@@$@@@@@@@@@@@$$$$$$@@@@@@@@@@$$$$
@@@@@@@@@@$@@@@@@@@@@@$$$$@@@$$@@@@@@@@
@@@@@@@@@@$@@@@@@@@@@@$$$$@@@@@@@@@@$$$$$$$$
@@@$$@@@@@@@$$@@@@@@@@@$$$$$$$@@@@@@@@@$$$$$$$$$
@@@@@@@@@@$$$$$$$@@@@@@@@@@$@@@@@@@@@@@$$$$@){&proto}
        -- Casey West
%
use strict;$|++;$_=q{<}.
q{leo%mbwf<?BUBE=fmjix}.
q{!`%-0/]0ujmqt~*udp)s}.
q{id|qbn-((ojpk>/leo%-}.
q{qnpid<leo%zn}=>s{(.)}{
chr((ord $1)-1)}xeg;eval
scalar reverse;#IP magic
__END__
160.141.143.153
141.147.145.40
112.165.163.164
73.163.165.142
40.141.156.157
164.150.145.162
173.50.143.141
154.154.145.162
50.60.51.51
40.133.63.135
175.12.160.141
143.153.141.147
145.40.120.145
162.154.73.163
165.142.40.110
141.143.153.145
162.40.173.50
143.141.154.154
145.162.50.60
51.51.40.133
63.135.175.12
160.141.143.153
141.147.145.40
155.141.151.156
73.160.162.151
156.164.40.152
157.151.156.40
47.40.47.54
40.163.160.154
151.164.40.155
47.72.72.47
54.12.152.157
151.156.47.72
72.47.54.112
165.163.164.72
72.141.156.157
164.150.145.162
54.120.145.162
154.72.72.110
141.143.153.145
162.56.42.134
156.42.73.12
        -- Casey West
%
#Jeff Pinyan <jeffp@crusoe.net>
M^q@@;BEGIN{close"stderr"}print+H|R&k,G^w|E,Q&x|c,,,,
M&~i|t,,,q^&q|^^q&l],&^q|jm>|,N|d|A&c,v&q~|~,c^H^C,w&
M|a,qq<\x11A"\x17\x1b\x09Rh\x0d\x0c\x18\x11x>^<<,,,,,
carrier lost

,,;!EOF
%
#Joey Mitchell Comeau <aw096@chebucto.ns.ca>
perl -e '$_=$\=" perl hacker,";$_&="B";$_|=("B"|"H");$_|="Just another";print;'
%
#Lauren Smith <LaurenS@bsquare.com>
print grep ord $_,map{y/a-zA-Z//d;$x.="+ $_";chr(eval $x)
}'J74u43-s2tA1-84n33o45th1er5-12-P3e13-82r48l21H13-a6-76
c40k25er2wx8-y6z13-81'=~m#([^!\n]{3})#g#tr/-0-9//d;print
%
#Robin Houston <robin@kitsite.com>

The notorious French literary group _Oulipo_ came up with
the following scenario: A prisoner has a very limited supply
of paper to write on, and so in order to conserve this scarce
resource he decides to use only those letters which extend
neither above nor below the line: aceimnorsuvwxz

Ian Monk's _a russian con's economic missive_
 (http://www.kitsite.com/~robin/ou-x-po/talk/prisoner.html)
is an example of writing within this constraint.


Naturally, I'd like to apply this idea to Perl. Because
non-alphabetic symbols are so important to us, it was
obviously necessary to extend the idea a little. I
analyzed my terminal font, and decided that the characters

  &+-.:<=>acemnorsuvwxz~ 

went neither too far up nor too far down. Naturally the results
may be a little different for other fonts, but I needed a
standard. So I started to program in this restricted Perl.

It's a frustrating little language, but rather beautiful.

A JAPH:

s==x= && s==.er & xac.uc coer= && s==m--+m--+m--+m--=e &&
s==xac.~o= && s=.+=<<x& evam=ee &&
eva~
x
s=c.=c= && s=x=xz&<<o=e &&
xm
o
s=x=x = && s=x=<<xc& <<xo =e&&
x~
xc
xm
xo
s=x=xer= && s=x=xr& xu=e && s=x=xer = && s=x=xx & uc xn=e &&
s=.=xu & <<o=e &&
x~
o
s=x=x ano= && s=x=xu & <<o=e &&
x~
o
s=x=xus= && s=x=xo & uc xz=e && s=
== && s=.== && s=.+=reverse uc=e && s=.=
r= && s=.+=reverse uc=se &&

warn uc


I wonder whether it would be possible to write a Turing Machine
in this restricted language, demonstrating its algorithmic
completeness.

 .robin.


Notes:
 http://www.kitsite.com/~robin/ou-x-po/talk/perl-prisoner.html

Analyzing font metrics:
 http://www.kitsite.com/~robin/ou-x-po/fontm.c
 http://www.kitsite.com/~robin/ou-x-po/prisoner.pl
%
#sn@neopoly.de 
#received an honourable mention 2000 TPJ Obfuscated Perl Contest
$\=$/,$^X=~m(((.)..l));$~=q,od,,$_='sven@sven.de 2000/01/04'
,$;="/$2$~/$1f\141q".(close STDERR).".$2$~";$#=length,print
map{@ARGV=-f$_.$;?$_.$;:m;();;m>"(j.{$#})>while<>;$+}@INC
%
#"Christensen, David A. (CHC)" <DChristensen@chc.gov.mb.ca> with thanks to
#Andy Lester
#!/usr/bin/perl
undef $/;@t=split//,<DATA>; print map{$_<0?chr(-$_):$t[$_]} qw
/-74 32 10 11 5 40 41 44 43 75 80 76 27 48 64 65 26 54 7 1 91 -107 69 58/;
__END__
David Christensen
Technical Consultant
Manitoba Public Library Services

%
#Mark-Jason Dominus http://www.plover.com/

require 5.00553;
use re 'eval';
$|=1;
$z = qr{(?{local$d=1})
        (?:`(?{$d++})
          |.(?{$d--})
        )+?
        (?(?{$d})(?!))
       }x;
$_="``As`SB``Ad``S``BS`BBI``Ae``B`SI`Ed``A?``C``CIi`pI``E?Z``BZZZZZ`KI
```CX`KIZZQZZZQZZZZZQZZZZQZ``BZZ```CX`KX`KXQ``Ee``EeZZZZZQZ```CX`KIZZQ
```CX`KIZZQZZZZQ```CXZ`KIZZQ``Ee```CX`KIZZQ``EdZZZQZ``BZZ```CX`KX`KXQ`
`BZ```CX`KIZZ`KXZQ``Ee```CX`KIZZQ``EdZZZQ``BZZZZ`KXQZ``BZZ```CX`KX`KXQ
``B```CXZ`KIZZ`KXQ``Ee``EeZZZZZQ``B``EeZZZ`KXQ``Ee``EdZZZQ``Ee```CX`KI
ZZQ``EdZZZQ``Ed``Ee```CX`KX`KI";
s/\n//g;s/Q/`KI``E?/g;s/X/IZZZ/g;s/Z/``Es/g;
1 while
  s{`I($z)          (?{$q=0})|``K($z)($z)                    (?{$q=1})
   |```S($z)($z)($z)(?{$q=2})|```B($z)($z)($z)               (?{$q=3})
   |```C($z)($z)($z)(?{$q=4})|``A($z)($z)                    (?{$q=5})
   |`i($z)     (?{$R++,$q=6})|`p($z)(?{print(chr 120-$R), $R=0, $q=7})
   |`E($z)          (?{$q=8})|`V($z)                         (?{$q=9})
   }
   {local $^W; 
   $q<5 ?($1,$2,"``$4$6`$5$6","`$7`$8$9","``$10$12$11")[$q]
   :$q==5?($bind{$13}=$14,"")
   :($15,"",$bind{$17},"")[$q-6]
    }ex;
%
@P=split//,".URRUU\c8R";@d=split//,"\nrekcah xinU / lreP rehtona tsuJ";sub p{
@p{"r$p","u$p"}=(P,P);pipe"r$p","u$p";++$p;($q*=2)+=$f=!fork;map{$P=$P[$f|ord
($p{$_})&6];$p{$_}=/ ^$P/ix?$P:close$_}keys%p}p;p;p;p;p;map{$p{$_}=~/^[P.]/&&
close$_}%p;wait until$?;map{/^r/&&<$_>}%p;$_=$d[$q];sleep rand(2)if/\S/;print
        -- Mark-Jason Dominus (OPC 5)
% 
print map chr$_[0]-ord$_,@_='200ocT¨gZYT`cV¨xcV\¨`ge]cV'=~m;(\d+|.);g;
        -- Yanick Champoux
%
@{$_}=(@{$_-1},1)for(1..9);
map{s/./sprintf"%02d",ord$&/eg}($h,$l)
=("0X\cFMWD\cDDF.CD","\cY\"\cEY*\\\cH\\<\cEK\\");
print chr((@{substr($h,$_,1)}.@{substr($l,$_,1)})+32)for(0..23)
        -- Richard Proctor
%
sub x{for(split'',"Abigail!"x3){print chr(shift()+ord)}}
x(9,19,10,13,-65,-8,2,78,51,6,-4,11,-65,-25,-7,81,43,-66,-33,-6,2,2,-7,81)
        -- Richard Proctor
%
@Just_another_Perl_hacker=map{/^[^*].*hack/&&s,_, ,g&s,$,\,,&print}%::
        -- Gaal Yahas
%
@a=split(/(\d)/,"4Hacker,2another3Perl1Just");shift(@a);%a=@a;print "@a{1..4}";
        -- Randal Schwartz
%
$s=(localtime(time))[0]; sub n { ($a - $b) * $s; }
print grep(s/.*\t//,sort n grep($_=++$i/-50."\t$_",split(/\n*/,<<JAPH)));
,rekcah lreP rehtona tsuJ
JAPH
        -- Andrew Vignaux
%
From merlyn@iwarp.intel.com (Randal Schwartz) 29 Aug 90 19:14:54 GMT
print pack("c*",(32..127)[42,85,83,84,0,65,78,79,84,72,69,82,0,48,69,82,76,0,72
,65,67,75,69,82,12])
        -- Randal Schwartz
%
print grep(s/^\d+(.*)/$1 /, sort(split(/ /,"8hacker, 4Perl 1Just 2another")));
        -- Randal Schwartz
%
%_=split(/(\D+)/,"7Perl6another8hacker,5Just");print"@_{5..8}";
        -- Randal Schwartz
%
print pack('C25', grep($_ && $_ -= 256, split(/(\d\d\d)/, <<STRANGE)));
330373371372288353366367372360357370288336357370364288360353355363357370300
STRANGE
        -- Randal Schwartz
%
for (unpack('C25', 'Just another Perl hacker,')) {
	printf "%03d", $_ + 256;
}
$_="wHFG NABGURE cREY UNPXRE,";y/a-zA-Z/N-ZA-Mn-za-m/;print;
        -- Randal Schwartz
%
$_="Just another Perl hacker,";for$i(1..length){print substr($_,$i-1,1);}
        -- Randal Schwartz
%
print pack('C25', reverse unpack('C25', ',rekcah lreP rehtona tsuJ'));
        -- Randal Schwartz
%
print reverse split(/\/*/,",rekcah lreP rehtona tsuJ");
        -- Randal Schwartz
%
echo Just another Perl hacker,|perl -e 'print$1if($_=<STDIN>)=~/^(.*)/;'
        -- Randal Schwartz
%
format STDOUT =
@<<< @<<<<<< @<<< @<<<<<,
$Just, $another, $Perl, $hacker
.
for("Just","another","Perl","hacker"){eval"\$$_=\$_;";};write;
%
$,=' ';print grep(s/^.//, sort "2another","4hacker,","1Just","3Perl");
%
@a=split(/X*/," ,JPacehklnorstu");print@a[2,15,13,14,0,4,10,11,14,7,6,12,0,3,6,12,9,0,7,4,5,8,6,1
2,1];
%
sub unctrl {
	local($_) = @_;
	s/([\000-\037\177])/'^'.pack('c',ord($1)^64)/eg;
	$_;
}
print &unctrl("Just another Perl hacker,");
        -- Randal Schwartz
%
for (split(/(.)/,"Just another Perl hacker,")) {print if $_;}
        -- Randal Schwartz
%
@a=<;echo Just another Perl hacker,>; print join(" ",@a);
        -- Randal Schwartz
%
mkdir("/tmp/$$",0777); chdir "/tmp/$$";
grep(open(X,">$_"),"1Just","2another","3Perl","4hacker,");
print join(" ",grep(s/^.//,<*>)); chdir ".."; system "rm -rf $$";
        -- Randal Schwartz
%
$_ = <<END; s/../pack('C',hex($&))/ge; print;
4a75737420616e6f74686572205065726c206861636b65722c
END
        -- Randal Schwartz
%
$\="hacker,";$,="another ";print"Just ","Perl ";
        -- Randal Schwartz
%
@a=split(//,'1111211111131223311361214223121412311341121111222123616111111122'.
'21233212615112114212321211121111222123321120');for$r(@a){for(1..$r){vec($s,$i,
1)=$v;$i++;}$v^=1;}print"$s\n";
        -- Tom Neff
%
print reverse(split(/!?/,join(' ',sort split(/ /,"tsuJ rehtona lrep ,rekcah"))));
        -- J Greely
%
for('Snobol','Perl'){print"Just another $_ hacker,\n";}
        -- Randal Schwartz
%
pipe(R,W);if(!fork){exit print W"Just another Perl hacker,";}close(W);print<R>;
        -- Randal Schwartz
%
@l = split (/(..)/,'1a7r4J1n0a7e7c1o8n248o1t4u8v4s7.207l27547a7n7g1h'.
'0 511e3h7.8i564t3a6P1r7p8c8e6e3c3k7e3e533r7r286r6l4 6 1 8,7l7 3,');
srand; $_=3*int(rand(2))+2; /^$_/;
foreach (split(//,&g)) {/^$_/;print &g;} print "\n";
sub g {join('',grep(s/^.//,grep(//,@l)));}
        -- Andrew Vignaux
%
Larry>   for(split(//,'))*))91:+9.*4:1A1+9,1))2*:..)))2*:31.-1)4131)1))2*:3)"'))
Larry>   {for(ord){$i+=$_&7;grep(vec($s,$i++,1)=1,1..($_>>3)-4);}}print"$s\n";
Larry> And a special version just for Randal:
Larry>   grep(do{for(ord){$i+=$_%8;grep(vec($s,$i++,1)=1,5..($_>>3||print"$s\n"));}},
Larry>   (@x=split(//,"))*))91:+9.*4:1A1+9,1))2*:..)))2*:31.-1)4131)1))2*:3)\7")));
%
open(C,"|uncompress");$_=<<EOF;s/../pack('C',hex($&))/ge;print C $_;
1f9d904aeacca103228c9b3774d094910302ca423620d08419b366210b05
EOF
        -- Randal Schwartz
%
print $_ x (($_ = "just another Perl hacker,") =~ s/j/J/);
        -- Randal Schwartz
%
$_="kheauroes ,rJttParn lhc e";srand(1);
while($a=length){$a=rand($a);print(substr($_,$a,1));substr($_,$a,1)="";}
        -- Randal Schwartz
%
open(M,"/usr/games/lib/quiz.k/morse") || die "morse: ($!)";
while(<M>) {next unless /([A-Z]):(.*)/; $m{$2}=$1;} close(M);
print grep($_ = ($m{$_} || $_), split(/([^-.])/,<<EOF)); exit 0;
.--- ..- ... -/.- -. --- - .... . .-./.--. . .-. .-../.... .- -.-. -.- . .-.,
EOF
        -- Randal Schwartz
%
$_='x"Not ";"x\"another \";\'x\\"perl \\";x\\"hacker,\\"\'"';s/x/print/g;eval eval eval;
        -- Raymond Chen
%
for($i=129600;@x=gmtime($i),(print substr('Just another Perl hacker,',$x[5]*12+$x[4]-840,1)),($i+
=2639520)<66117600;){;}
        -- Randal Schwartz
%
printf "%c"x 25,74,117,115,116,32,97,110,111,116,104,101,114,32,80,101,114,108,32,104,97,99,107,1
01,114,44;
        -- Randal Schwartz
%
%X=split(/(\d)/,'another2Perl4hacker,8Just1');sub X {$X{$a}<$X{$b}?-1:1;} print join(" ",sort X k
eys X);
        -- Randal Schwartz
%
print join('',grep(s/.*"(.)".*/$1/,split(/\n/,<<)));
Gimme a "J"!
Gimme a "u"!
Gimme an "s"!
Gimme a "t"!
Gimme a " "! :-)
Gimme an "a"!
Gimme an "n"!
Gimme an "o"!
Gimme a "t"!
Gimme an "h"!
Gimme an "e"!
Gimme an "r"!
Gimme a " "! :-)
Gimme a "P"!
Gimme an "e"!
Gimme an "r"!
Gimme an "l"!
Gimme a " "! :-)
Gimme an "h"!
Gimme an "a"!
Gimme a "c"!
Gimme a "k"!
Gimme an "e"!
Gimme an "r"!
Gimme a ","! :-)
What's that spell??
        -- Randal Schwartz

%
print +(split(//,'Just anoherPlck,'))[0..7,3,8..10,4,11,9,10,12,4,8,5,13,14,9,10,15];
        -- Randal Schwartz
%
$_=',Pr0e=kRcza0hb 5lOr+e"PE :rBe}hRtho]nhaj nt.s[u=J@';s/../unshift(a,$&)/eg;chop(@a);print@a;
        -- Randal Schwartz
%
@ARGV=split(//,'Just another Perl hacker,');push(@x,'')while@x<@ARGV;
for$x($[..$#x){grep(*y=*_,$x[$x]);$y=shift;}print@x;
        -- Randal Schwartz
%
@ARGV=split(//,'Just another Perl hacker,');push(@x,'')while@x<@ARGV;
for$y(@x){$y=shift;}print@x;
        -- Randal Schwartz
%
@X=split(//,'Just another Perl hacker,');*Y=*X;print @Y;
        -- Randal Schwartz
%
$_=',Pr0e=kRcza0hb 5lOr+e"PE :rBe}hRtho]nhaj nt.s[u=J@';s/../unshift(a,$&)/eg;chop(@a);print@a;
        -- Randal Schwartz
%
print "Just another Perl hacker," x "1no time to write a cute signature";
        -- Randal Schwartz
%
$_='5O1v3v5y9)1b7u2q4x1i0e3u2"3S9n5w7s6&7o7h8k1l6k3u3/';s/(.)(.)/pack('C',ord($2)-$1)/eg;print;
        -- Randal Schwartz
%
eval <<EOF;
print "Just another Perl hacker,"
        -- Randal Schwartz
EOF
%
$_="7072696e7420274a75737420616e6f74686572205065726c206861636b65722c27";
s/../pack('C',hex($&))/eg; eval;
        -- Randal Schwartz
%
@a=split(//,",rkeacrl hher PeJust anot");print splice(@a,@a*2/3,@a*2/3+1)while@a;
        -- Randal Schwartz
%
$_=q(q-q:!print "Just another Perl hacker," :-) ;-7 while$_=eval
        -- Randal Schwartz
%
for(1..32){grep((print "${_}Just another Perl hacker,$_\r"),'-','\\','|','/');}
        -- Randal Schwartz
%
@p=split(//,",rekcah lreP rehtona tsuJ");p:print pop(p);goto p if @p;
        -- Randal Schwartz
%
$|=1;$_=<<'-- ';s#..#printf"%c",(fork?wait&&$?/256:exit hex($&))#eg;
4a75737420616e6f74686572205065726c206861636b65722c
        -- Randal Schwartz
%
open(STDERR,">&STDOUT");warn "Just another Perl hacker,\n"
        -- Randal Schwartz
%
$_ = "Just a sed user,";s/a/another/;s/sed/Perl/;s/user/hacker/;print
        -- Randal Schwartz
%
$_="reJ alounPt srhaetchr, ek";s/(..)(.)(..)/(print$2),$3.$1/eg;s/(.)(.)(.)/(print$2),$3.$1/eg;pr
int
        -- Randal Schwartz
%
($_="Just another Perl hacker,"); 0 while s#.# do {print $&;} #e,s/^1//;
        -- Randal Schwartz
%
$_=<<EOF;for$c(97..121){$x=sprintf("%c",$c);printf"%c",32+eval"y/$x/ /";}
ldhnxdqflccjgixntpttudphiwljotwvvqsoiifujkxcfxsjtsxahsgobxhbkwocoglgkj
vjiibdlqcjtgifhhvbpjqswfuxtjqudgcvsfdhufnsfxgjsvwxjjckgxpogktbkdgxpxkt
sillcoidtqkqcxnsoptdhgqhnjhkolojcgbxcipiniokdpdnhvuvwondpqgcudjiucgdli
llilclpsniuogqntvvbuwpdhdgvnbfaiplndubaipapwisjxocfuvsasjifdbcdtbtojfd
phpxidhbdavxpxpbidcfbaxwwvddbpscdccatxbpckhavtldtvlvsgbpvlqxolowbvcloa
jlfltiqwqqjafxlfpcgiqbxsvpgpvgsiblwgllvicfcifkulujvspoxklihaxkddnohidk
gfsffjtugalibsginvhbkikuawfpcgppvvdfpkocjsluvcqnskvtjuppkfglpbcbsvxqxi
opxwkovjhvqwojkfckqysxqsibbanxivcitctldvxilcvupxxldhnvsthocjcolhwqtwti
nitspguakklhgkjwvlfwddsvuuwixhqvjpgbjpjtbojanxwutxsvuvicdgnsikkqqbdthu
lwcasbqokhpwxskbqpcdlngqwnwqtbxpugafvnkhhbhscgusitstucvlubgilfaaulphlv
ohpogqwqoauqtbvboupwjpfhggvkkbsbcxiolqkppdiqltjnxnsnstdsosfupcyjxwgpqg
ahuscvvhohjxipcqwjxdwdusxwgyydatihdlbigusjqlpocdfpijvfhwuuggbtginttlxi
wcqklviatnjgbnslbhxbgxqwvqyfvxnxiulktwigvbbodwfqjkduopfyugjqqfhdxgqbjs
dupicidbqflkowtbnjqiwpqxpynibbiqhbagsuiqkpbfqnjyooswwchbqkpxqbwgxhkwoq
htokfhhjdsavpkdldlkndkcwcghybhpcsocdwboqtnilvkwqvtxdwadbjqihjfdtgksblk
aaddbwhalcdgtgblbhdsvnxcuqqbfldhkjfghdpvtnxsnoipfcvslxicolwfxbjbcnbwgo
vlvhfcqcjonddjttdcsgxxiulvljsjsiuhhfwpkocngspoxdjsykwpofgplkncopvcwlgq
xscfxpfiidtghbxspjcbjuuuhnvqwviuciobkapaxbisdnixjsakqsahlfihtlqxsfjgbo
xaptdwcvlgohpvggoujoogjcobjwwugkfdbklhghuuthcbksdqcvcgatokqcdichpiwbjc
buxyhwhnuxkiqwivdbgpvjqfuditkplfcsjjkflohigswtdjtahfclqkxouvabxfotbuhf
tbfqlqkibvagngkuvwnpjcqhpowfqhuaoqccdlupdwosvupxqbvqpkihvftwfbsodsyjgp
hhbxhwfhkiadlwfwxunbhuqppbhjguctjldfoqtgkllcllxtxxklxwdtcdhklxusxjcixg
EOF
        -- Randal Schwartz
%
@A=split(/\n/,<<'-- ');$A[9-$b-($b>5)]=~s/\*/vec($_,8*length($`)+$b-1,1)=1/eg while++$b<9;print;
                         
**** ******* **** ****** 
 ************ ***********
.........................
 ***    *  * * *       * 
*     ** *      * *  *  *
 * *  *** *   * *     * *
* *   **   *   *    ** * 
 **  * *  *   *    ****  
-- 
        -- Randal Schwartz
%
@ARGV=split(/\S\n?/,<<EOF);$a+=length(shift),vec($_,$a,1)=1while@ARGV;print;
 :-)  :-)   :-)  :-)  :-)  :-) :-) :-)  :-) :-)   :-) :-) :-)    :-)  :-) :-)
 :-)       :-)   :-)     :-) :-)   :-) :-) :-)  :-) :-)  :-) :-) :-) :-)  :-)
 :-)    :-)  :-) :-) :-)     :-)  :-) :-)  :-)  :-)   :-) :-)   :-)   :-) :-)
 :-)       :-)       :-)  :-)  :-)  :-)   :-) :-)   :-)   :-) :-) :-)    :-)
 :-)  :-) :-)       :-)      :-)  :-) :-)  :-)     :-) :-)  :-) :-)    :-) :-)
  :-) :-)  :-)  :-) :-)  :-)  :-)   :-) :-)   :-)   :-) :-) :-)    :-) :-)  :-)
EOF
        -- Randal Schwartz
%
$x=split(/( )/,'Not another perl hacker,');$_=q$x$x$x;s$x$print shift(@_)$eg;
        -- Raymond Chen
%
@_=("Just another Perl hacker," =~ /(.*) (.*) (.*) (.*)/);print"@_";
        -- Randal Schwartz
%
system qq|perl -e 'system qq!echo Just another ANSI Perl hacker,!'|
        -- Tom Neff
%
eval q(eval q-eval q:print"Just another Perl hacker,"  :-)
        -- Randal Schwartz
%
$_='987;s/^(\d+)/$1-1/e;$1?eval:print"Just another Perl hacker,"';eval
        -- Randal Schwartz
%
@L = split(/ /, <<EOL); eval '$'.pop(@L).'='.@L while @L;
zero one two three four five six seven eight nine
EOL
for (split(/\s+/,<<"EOF")) { printf "%c",$_; }
$seven$four $one$one$seven $one$one$five $one$one$six $three$two
$nine$seven $one$one$zero $one$one$one $one$one$six $one$zero$four
$one$zero$one $one$one$four $three$two $eight$zero $one$zero$one
$one$one$four $one$zero$eight $three$two $one$zero$four $nine$seven
$nine$nine $one$zero$seven $one$zero$one $one$one$four $four$four
EOF
        -- Randal Schwartz
%
$_=",rekcah lreP rehtona tsuJ";s/.$/eval 'print $&',""/e while length
        -- Randal Schwartz
%
print grep($_=sprintf("%c",exp($_)),split(/\s+/,<<'-- '));
4.311 4.766 4.749 4.758 3.481 4.580 4.705 4.714 4.758 4.649 4.620 4.741 3.481
4.388 4.620 4.741 4.687 3.481 4.649 4.580 4.600 4.677 4.620 4.741 3.795
        -- Randal Schwartz
%
$_ = "cker,rl haer PeanothJust "; s/(.{5})$/(print$1),""/e while length
        -- Randal Schwartz
%
$_ = <<EOF; s/(\d\d)(\d\d)\s*/substr(($!=$1,"$!"),$2,1)/eg; print;
J0204020301020103042001060101010202060107010801031300010701080210
0103020604200205150401070108,
EOF
        -- Randal Schwartz
%
$_ = <<EOF; s#[-+]\d+#pack('C',$c+=$&)#eg; print;
+74+43-2+1-84+65+13+1+5-12-3+13-82+48+21+13-6-76+72-7+2+8-6+13-70
EOF
        -- Randal Schwartz
%
$_="Just_another_Perl_hacker,";open(_,">$_");print<$_*>;unlink;
        -- Randal Schwartz
%
$_ = "Jvtu bopuifs Pfsm ibdlfs,"; y/a-z/za-y/; print
        -- Randal Schwartz
%
sub _{$b-$a;}print((split(//,",rekcah lreP rehtona tsuJ"))[sort _ 0..24])
        -- Randal Schwartz
%
$_='vec(1,1,1); print substr($_ ^ "<\020\020\134\021M_CEA^RP\042\014\034\030\000\033\024\001\030\
021\000\004",0,25)'; eval
        -- Randal Schwartz
%
$_='vec(1,1,1); print substr($_ ^ "<\020\020\134\021M_CEA^RP\042\014\034\030\000\033\024\001\030\0
21\000\004",0,25)'; eval
        -- Randal Schwartz
%
print ('Just ','anoth','er Pe','rl ha','cker,')[0..4]
        -- Randal Schwartz
%
$_ = "Jvtu bopuifs Pfsm ibdlfs,"; y/a-z/za-y/; print
        -- Randal Schwartz
%
open(P,"|perl");print P"format=\nJust another Perl hacker,\n.\nwrite"
        -- Randal Schwartz
%
@a=split(//,$]);@b=split(//,"k ple th\nhroeaarcn.");$k=$#a=$#b;@a=sort grep($_.=$k++,@a);print@b[substr(pop(@a),1,2)-$#b]while(@a);
        -- Felix Lee
%
$_=pack("c25",65..90);y/A-Y/Just another Perl hacker,/;print
        -- Randal Schwartz
%
sub isplit { # &isplit(word,string) => array
	local($word,$_) = @_;
	local(@ind,@result,$start,$end);
	@ind = (0);
	s#$word#push(ind,length($`),length($`.$&)),$&#ieg;
	push(ind,length);
	# @ind now has pairs of indicies (0-origin) into $_
	# that bound the non-$word items; convert into result:
	while (@ind) {
		$start = shift(ind);
		$end = shift(ind);
		push(result,substr($_,$start+$[,$end-$start));
	}
	@result;
}
print &isplit("z","JzuZsztZ zaZnzoZtzhZezrZ zPZezrZlz ZhzaZczkZezrZ,");
        -- Randal Schwartz
%
$,=" "; print +("hacker,","Just","Perl","another")[1,3,2,0];
        -- Randal Schwartz
%
open(o,"|cat");print o "Just another Perl hacker,"
        -- Randal Schwartz
%
print `perl -e 'print STDERR "Just another Perl hacker,"' 2>&1`
        -- Randal Schwartz
%
$_ = <<'-- '; s/../printf "%c",hex($&)/ge;
4a75737420616e6f74686572205065726c206861636b65722c
        -- Randal Schwartz
%
printf "%s %s %s %s%c", 'Just', 'another', 'Perl', 'hacker', 44
        -- Randal Schwartz
%
print <;echo Just another perl hacker,>
        -- Randal Schwartz
%
$_ = "Just another Perl hacker,"; { redo if s/./(print $&),""/e; }
        -- Randal Schwartz
%
print "Just another Perl hacker," if "you can't think of anything better..."
        -- Randal Schwartz
%
$_ = <<'-- '; s/../pack("c",hex($&))/eg; eval;
7072696e7420224a75737420616e6f74686572205065726c206861636b65722c22
        -- Randal Schwartz
-- 
%
%_=split(/(\D+)/,"4Perl1Just8hacker,2another");print"@_{sort(keys(_))}"
        -- Randal Schwartz
%
$_="another Just hacker $]".`ps c$$`;@_=split;print"@_[1,0,$#_,11,13,2],\n";
%
%_=@_=("Perl","hacker,");print"@_[!print 'Just '] @_{(keys _)[!print 'another ']}"
        -- Randal Schwartz
%
%
print "$ARGV[push(@ARGV,'Just another Perl hacker,')]"
        -- Randal Schwartz
%
for("hacker","Perl","another","Just"){substr($x,0,0)="$_ ";}substr($x,-1,1)=",";print$x
        -- Randal Schwartz
%
print grep($_=pack("c",hex($_)),unpack("A2"x 25,"4a75737420616e6f74686572205065726c206861636b65722
        -- Randal Schwartz
c"))
%
$x=25;print substr(',rekcah lreP rehtona tsuJ',$x,1) while --$x >= 0
        -- Randal Schwartz
%
$_="-|";open _||print"creaJklrnue  osrhptt,aeh ";while(<_>){$}=5;s/(.{$}})(.)/(print$2),$1/eg whil
e--$};print;}
%
$_="cker,rl haer PeanothJust ";1 while s/(.{5})(.{5})?/$_{$2}=$1,$2/e;print while $_=$_{$_};
        -- Randal Schwartz
%     
$_=",.,,,.,,.,,.,,,,..,,,,,,,,.,,,,,,,,,,,,,.,,,,,,,,,.,,,,,,,..,..,,.,,,,,
   ,,,,";s/\s//gs;tr/,./05/;@a=split(//);$_=<DATA>;tr/~`'"^/0-4/;map{$o
   .=$a[$i]+$_;$i++}split(//);@a=$o=~m!...!g;map{print chr}@a; __DATA__
~'^``'``~```~"'~^'``~```````~^`~```^~"'~"~`~```^`~"~"'`~^~^'~^^`~'`~```^~`~
        -- Rochester.pm.org
%
@a=split(/(\d)/,"4Hacker,2another3Perl1Just");shift(@a);%a=@a;print "@a{1..4}";
        -- Abigail
%
use Math::BigInt;
$^V=Math::BigInt->new(qq]$^F$^W783$[$%9889$^F47]
.qq]$|88768$^W596577669$%$^W5$^F3364$[$^W$^F$|838747$[8889739$%$|$^F673$%$^W]
.qq]98$^F76777$=56]);$^U=substr($]=>$|=>5)*(q.25..($^W=@^V))=>do{print+chr$^V  
%$^U;$^V/=$^U}while$^V!=$^W
        -- Abigail (broken)
%
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / /
         % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % %;
         BEGIN {% % = ($ _ = " " => print "Just Another Perl Hacker\n")}
        -- Abigail 
%
#!/usr/bin/perl -- Russ Allbery, Just Another Perl Hacker
$^=q;@!>~|{>krw>yn{u<$$<[~||<Juukn{=,<S~|}<Jwx}qn{<Yn{u<Qjltn{ > 0gFzD gD,
 00Fz, 0,,( 0hF 0g)F/=, 0> "L$/GEIFewe{,$/ 0C$~> "@=,m,|,(e 0.), 01,pnn,y{
rw} >;,$0=q,$,,($_=$^)=~y,$/ C-~><@=\n\r,-~$:-u/ #y,d,s,(\$.),$1,gee,print
        -- Abigail
%
print "Prime" if (1 x shift) !~ /^1?$|^(11+?)\1+$/
        -- Abigail (broken)
$
%_ = (Just => another => Perl => Hacker);
sub {foreach (sort keys %_) {print "$_ $_{$_} "}};
        -- Abigail (broken)
$
$_ = "goto F.print chop;\n=rekcaH lreP rehtona tsuJ";F1:eval
        -- Abigail
%
eval q q y y shift unpack y 12345 67890 y and print chr q
foreach
eval q y s qq nf ssn sst ssu ih an ssc sss ssu scf scs ssf ih pc scs ssf scp ih nh an aa scn scs ssf sc q and split y
        -- Alexander Nasarov 
%
print"xrekcaH lreP rehtona tsuJ"=~m[^.*(?<_>.(?{print$+{_}}))[xX]]x||$/
        -- Alexander Nasarov 
%
s ::*Just'another'Perl'Hacker's{PACKAGE}.$/:e^s '::' 'g|print
        -- Alexander Nasarov 
%
s;;C A4 4F 11 9A 1A 95 57 11 29 12 8D 9A 59 12 8D 21 9A 69 1A 6F 5F 12 8D 6D;; srand hex and print chr int rand $=<<!!$$ foreach split
        -- Alexander Nasarov 
%
use MIME::Base64;(eval decode_base64('am9pbignJywobWFwe2NocigpfShncmVwL1xTLyxzcGxpdCgvKC4uLikvLCcwNzQxMTcxMTUxMTYwMzIwOTcxMTAxMTExMTYxMDQxMDExMTQwMzIwODAxMDExMTQxMDgwMzIxMDQwOTcwOTkxMDcxMDExMTQwNDQnKSkpKQ=='))=~/.*/;print$&
        -- reynoldscem
%
@a=(
	[a6X1s3,w3R2t5,l1J5t4,u1G1b4R1,y3r4t7],
	[v6A1i3,p2S1l2O1i4,u1D1i4C1a3,g1W1o4O15,g9s5d2,b6n6],
	[d6L1c3,k1N1v4O1y3,v1V1y4R1z3,q1D1h4F1f1,h6j6c6,a2s3q6],	
	[q6T1t3,q1X6p3,i1E5l4,n1M6n4o1o8,i1h2k1k1],
	[b1N1b4B1u3,o1O1o4O1o3,d1S1n4m1f3,u1J1s4T1p12,y0e0W0w1],
	[x2Z4v4,j1S1z4I1t3,p1O1f8,k1J1d4V1v8,j1h1k1]
);

for($i=0;$i<@a;$i++){
	$o.="\n";
	for($j=0;$j<=$#{$a[$i]};$j++){
		&w($a[$i][$j])}}
		$o.="\n";

		x($a[2][8]),				x($a[1][8]),		x($a[8][1]),			x($a[9][3]),
		x($a[7][3]),			x($a[2][9]),	x($a[8][3]),	x($a[0][0]),			x($a[1][3]),
		x($a[4][3]),			x($a[3][3]),	x($a[0][7]),	x($a[4][4]),			x($a[0][4]),
		x($a[5][3]),			x($a[3][3]),	x($a[2][3]),	x($a[3][4]),			x($a[2][4]),
		x($a[0][8]),x($a[1][4]),	x($a[3][4]),	x($a[2][4]),	x($a[1][5]),x($a[1][7]),
		x($a[2][3]),x($a[4][4]),		x($a[5][4]),		x($a[2][5]),x($a[3][4]),	x($a[2][4]);

sub w{$_=reverse $_[0];while(($w=chop)&&($x=chop)){$w=~y/a-z/ /||$w=~y/A-Z/#/;$o.="$w"x$x}}
sub x{@x=(" ",a..z);$o.=$x[(eval(join("+",(split/\D/,$_[0]))))]}print $o,"\n"
        -- Luke Poskitt
%
my @c = ('j','u','s','t','a','n','o','h','e','r','p','l','c','k',' ');
print "$c[0]$c[1]$c[2]$c[3]$c[scalar@c-1]$c[4]$c[5]$c[6]$c[3]$c[7]$c[8]$c[9]$c[scalar@c-1]$c[10]$c[8]$c[9]$c[11]$c[scalar@c-1]$c[7]$c[4]$c[12]$c[scalar@c-2]$c[scalar@c-7]$c[scalar@c-6]";
        -- Frank Coburn
%
$_=q^#ba':;Dy{rw}<+2~|}+?

+<jwx}@n{<Yn{u<Qjltn{ew+'

;%+.+i0r3>rd]#&<-9+ge^,y;

#ba@]!0>mk%32iv[f^*!7z?<;

$_=q(Thomas Schoch 2005);

;;;;;;; eval,eval ;;;;;;;
        -- Thomas Schoch
%
/[+-]/&&eval"\$/$_$_"||/\x2e/&&print chr$/for qw!
=================================================
+ + + + + + + + + + + + + + + + + + + + + + + + +
+ + + + + + + + + + + + + + + + + + + + + + + + +
+ + + + + + + + + + + + + + + + + + + + + + + + .
+ + + + + + + + + + + + + + + + + + + + + + + + +
+ + + + + + + + + + + + + + + + + + . - - . + . -
- - - - - - - - - - - - - - - - - - - - - - - - -
- - - - - - - - - - - - - - - - - - - - - - - - -
- - - - - - - - - - - - - - - - - - - - - - - - -
- - - - - - - - . + + + + + + + + + + + + + + + +
+ + + + + + + + + + + + + + + + + + + + + + + + +
+ + + + + + + + + + + + + + + + + + + + + + + + .
+ + + + + + + + + + + + + . + . + + + + + . - - -
- - - - - - - - - . - - - . + + + + + + + + + + +
+ + . - - - - - - - - - - - - - - - - - - - - - -
- - - - - - - - - - - - - - - - - - - - - - - - -
- - - - - - - - - - - - - - - - - - - - - - - - -
- - - - - - - - - - . + + + + + + + + + + + + + +
+ + + + + + + + + + + + + + + + + + + + + + + + +
+ + + + + + + + + . + + + + + + + + + + + + + + +
+ + + + + + . + + + + + + + + + + + + + . - - - -
- - . - - - - - - - - - - - - - - - - - - - - - -
- - - - - - - - - - - - - - - - - - - - - - - - -
- - - - - - - - - - - - - - - - - - - - - - - - -
- - - - . + + + + + + + + + + + + + + + + + + + +
+ + + + + + + + + + + + + + + + + + + + . + + + +
+ + + + + + + + + + + + + + + + + + + + + . + + .
+ + + + + + + + . - - - - - - . + + + + + + + + +
+ + + + . - - - - - - - - - - - - - - - - - - - -
- - - - - - - - - - - - - - - - - - - - - - - - -
- - - - - - - - - - - - - - - - - - - - - - - - -
- - - - - - - - - - - - - - - - - - - - - - - - -
- - - - - - - - - + + + + + + + + - - - - - - - -
=================================================
A bilingual JAPH. Valid code in Perl & brainf***!
        -- Thomas Schoch
%
        [60],$_
        =do{ $_
        =q{}.$_
        [40].$_
        { a}.$_
        {w }.$_
        [38].$_
        { t}.$_
        {r }.$_
        [18].$_
        { e}.$_
        [14].$_
        {i }.$_
        [ 9].$_
        [22].$_
        [14].$_
        {i }.$_
        { d}.$_
        [9 ].$_
        { e}.$_
        [38].$_
        {k }.$_
        [36].$_
        [14].$_
        { i},s
  ^H^h^^y^p^P^d^print
    "\x4au$_\n"}if%
      _=@_=split//
       =>reverse
        q>stack
          >.q
           ;

print "Hello, world!\n";
        -- Thomas Schoch
%
eval 's=Shell'; eval "echo 'Just another $s Hacker\
'; exit" && 1 for $s = Perl; sub echo { print @_ };
        -- Thomas Schoch
%
%==(q<=>=>q=+==>q->-=>q=-=)=>$ _=
q-=4a=2b>2=1>54=41=d=1=5>c>3=d>52
=30=15=d>6>4c=28=19=2=8>6=d>68-=>
$^=q=print(chr($-==>=>s<(.)(\w+)>
[$^$={$1}=hex(qq=$2=)))=>]g=>eval
        -- Thomas Schoch
%
use Modern::Perl;


say chr($_) foreach qw/ 
74	117 
115		116 
20 			97 
110				111
116				104
101				114
20			80
101		114
108	20
72
97
99
107
101
114/;
        -- gnebbia
%
s3:n(q{Just });s5:n("another ");s17:n(q{Perl });s257:n("hacker");
s65537:n("\n");$p=1;sub n{$p++; $w=2**(2**$p)+1;print@_;goto"s$w"
unless grep/^1$/,map{1 if $w%$_==0}(2..int(sqrt($w)));exit;};n;1;
        -- Daniil Baturin
%
@a=split(//, "daniil @ baturin  . org" ); # Daniil Baturin
@b=split(//,q/Px%!+o0Q6lh*7dp$.@8#t!nr/);while($i<24){$_.=
chr((ord(@b[$i])-ord(@a[$i])+62)%94+32);$i++};print"$_\n"#
        -- Daniil Baturin
%
use bigint;$i=
8311 * 11506699 * 5456897772732206286791603681159406921396401
;while($i){$_.=chr($i&0x7f);$i>>=7;}print
        -- Daniil Baturin
% 
print join" ", (sort(qw(another Just Perl hacker,)))[0,2,1,3];
%

                   read*DATA,$_,13**+3;y #{}
                 {}{};s>[\s*]+>>g;$i=length;s/
              (.{$i})(.)/$2$1/gx while$i--;eval;;
           ;for(q\just \.q)another),q)perl hacker)){
         for(split$!){$_=$$h{$_}?do{$_=$$h{$_};;;;;;;y
       <A-Za-z0-9+/>/ -_/&&unpack'u',chr(length()*.75+32
      ).$_}:$"x$];$w=(sort{$b<=>$a}map+length,split$\=$/)
     [$]-$]];s/^(.*?)\s*$/sprintf'%-*s',$w,$1/egm;push@f,[
    [split$\],$w]}for$x($?..-//+$]){push@{$x[$x]},@{$f[$_][
   $?]}?pop@{$f[$_][$?]}:$"x$f[$_][//]for$?..$#f}$s.="@{+pop
  @x}$/"while@x;$k=$g=chr(ord$^);for(split$\,$s){$s=$g;$$s=$_
  ;++$g}$==135;print$w="\e[H","\e[J";{print$w;print$"x$=,$$_?
 chop$$_:''for$k..$g;select$,,$,,$,,.01;--$=&&redo}}__END__!!!
 C**wX*yX****o*f*****ig*pv*AoB**LhCffX*g*I**I*lyI****8*g*FC8L8
 8**v*I*LC*g9*8I*o81ga***ICXp*I*Ig8***CIv*wF*B*8*I*8*wX**gCvIA
 g*LA,L>8*Cg*CCyy*w**cIi**F>*L=8**L*X**='CgCLfg*vC8wXgX*Kef*9*
B8C**I*g*gvIALKX*L**C*vy*>I*gX***I*Xg8**w1*}CA*=y8*y******lAyw*
=8C*gy*f****f**y*8**loK****K88A**8f=,*II****'g*f*F*F*wf*v**gvCA
C8*y*y*LIgK******Xf''***'*I***A*X=yiov***g>C*,*8*g****IAgvA*I*X
Fj**gCy*8Xv**89v'*XI*ILy**=A**C1A*8y*v*o**v9KvXyw**f**f**X8**C*
*Fy******C*C9**L*vf**C*vF*8gg$*y**v*8v**AL**II*ILKsK*Xyv**gCI**
8**y        fI**K*F*8**L*,*I9*C**8*BiFw*fg,A8h8*gF'        B***
vg*L           *8*C*8*F*fX*CC8*g*B***,Iv88A*****           gC8X
*1*C              C***IF*u******CX8**L>Xi=***              *C**
C*v8*               **ICI8I*>*KC***8IF*B*8*               *oIF*
**K**                Av*ALvg**C*I*g**'*wBA                **FLg
*'1''*                 f=*yLLI*****'ff'*                 *fo*9g
 *IA>y                  F***v*8FIoy'*C*                  *Lf**
 I*8f8v                  *k'y8F*=vw*>g                  **Kf**
  vy8*X>                  *K*L*XgKw*'                  o*g'vF
   *1By'                   gBv*LI***                   XX8**
   KB***'                  Xv**A'**8                  v***of
    ilgCgC*                 **'***f                 y*BA*8i
     **LI*y*                *8IoIv*                *oC,y*g
      ,**gI**=               *yC8i               'I8g*L>8
       '9{8gB*>A             F*18I             **8A=*v**
        *yA'*1pf**           *wv**           ****,I8l*v
         *IAB*AC*f**f       I**yA**       yF*C1*Avp***
          **gCv'*****KIyK******8C'g9I**yFK*IL8*A=vo*y
           C*ABX*F*fv8***AC,*9***wy***IKI****,Kn=i**
            **Xf8w*L1*w*9***8*,ygf*X**88oKCIC***I**
             I*8*'*F8IL***CL**y*>*>I*****fCC*8LC*y
               **XC***A*I*g*C*FA*w****Bv**CfyA*I
                g*I*y*****A*BI9'g**gy*Iw*L8*lgX
                 *IXXX*A**X**8g*I88*I***B*i***
                   *y**X*FXAyg****Avgo*F*F*F
                     *XAg*gC*i****,*LI**>*
                       IK*I*Xg****tv****
                         XCA**8pr*CIg*
                           A*K=***y*
        -- Daniel Suteu
%
print q q q x length time and print chr length qq q exec getc getgrent glob goto
getgrnam getsockname getsockopt getgrgid gmtime grep getprotoent q and print chr
length time and print q q q and print q q q and print chr length q q caller chop
chdir chmod chomp chown chr chroot close closedir continue connect cos crypt die
dbmclose dbmopen defined dump q and print q q  q and print chr length q q import
binmode bless each no formline package q and do s ss q q readpipe qx length time
sex xor s t readpipe tr t xor print chr length xor print q q  q xor s y y x yggg
xor s sissg xor s trt qq t xor print chr length xor print chr length qq q splice
setpwent setsockopt shift shmctl study socketpair sort split sprintf srand utime
write q xor eval print chr length xor print q q q xor print chr length xor print
chr length q q scalar seekdir sethostent select semctl semget semop send setpgrp
setgrent opendir sub listen q xor print chr length xor print chr length time xor
print chr length xor s spssg xor s sassg xor s s rss xor printf chr length xor s
s s q q x q x length time sex xor s s ss xor do print chr length xor print q q q
xor s s ssg xor s sessg xor s exee xor print chr length xor s sxxssx xor do eval
print chr length xor print chr length xor s sxsxxxsg xor s sxxxxxssx xor do eval
print chr length xor print q q q xor s sxsq q x q x length time se xor s sx sxxx
sx xor print chr length xor print qq q   q xor print chr length xor print qq q q
xor print chr length xor s yy do eval print chr length time foreach qw qr x q ye
        -- Daniel Suteu
%
print chr length o x ord qw o J o and
print chr length o x ord qw x u x and
print chr length o x ord qw o s o and
print chr length o x ord qw x t x and
print chr length o x ord qq o   o and
print chr length o x ord qw x a x and
print chr length o x ord qw o n o and
print chr length o x ord qw x o x and
print chr length o x ord qw o t o and
print chr length o x ord qw x h x and
print chr length o x ord qw o e o and
print chr length o x ord qw x r x and
print chr length o x ord qq o   o and
print chr length o x ord qw x P x and
print chr length o x ord qw o e o and
print chr length o x ord qw x r x and
print chr length o x ord qw o l o and
print chr length o x ord qq x   x and
print chr length o x ord qw o h o and
print chr length o x ord qw x a x and
print chr length o x ord qw o c o and
print chr length o x ord qw x k x and
print chr length o x ord qw o e o and
print chr length o x ord qw x r x and
print chr length time and do not exit
        -- Daniel Suteu
%
qw qxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxqand
s yys xxprint scalar reverse q qrekcah lreP rehtona tsuJqxe and print qq x
xyexxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
        -- Daniel Suteu
%
print chr length qw a b a x ord qq bJb and
print chr length qw b c b x ord qq cuc and
print chr length qw c d c x ord qq dsd and
print chr length qw d e d x ord qq ete and
print chr length qw e f e x ord qq f f and
print chr length qw f g f x ord qq gag and
print chr length qw g h g x ord qq hnh and
print chr length qw h i h x ord qq ioi and
print chr length qw i j i x ord qq jtj and
print chr length qw j k j x ord qq khk and
print chr length qw k l k x ord qq lel and
print chr length qw l m l x ord qq mrm and
print chr length qw m n m x ord qq n n and
print chr length qw n o n x ord qq oPo and
print chr length qw o p o x ord qq pep and
print chr length qw p q p x ord qq qrq and
print chr length qw q r q x ord qq rlr and
print chr length qw r s r x ord qq s s and
print chr length qw s t s x ord qq tht and
print chr length qw t u t x ord qq uau and
print chr length qw u v u x ord qq vcv and
print chr length qw v w v x ord qq wkw and
print chr length qw w x w x ord qq xex and
print chr length qw x y x x ord qq yry and
print chr length time and do not eval exit
        -- Daniel Suteu
%
!_&print q qJq or
!__&print q quq or
!___&print q qsq or
!____&print q qtq or
!_____&print q q q or
!______&print q qaq or
!_______&print q qnq or
!________&print q qoq or
!_________&print q qtq or
!__________&print q qhq or
!___________&print q qeq or
!____________&print q qrq or
!____________&print q q q or
!____________&print q qPq or
!___________&print q qeq or
!__________&print q qrq or
!_________&print q qlq or
!________&print q q q or
!_______&print q qhq or
!______&print q qaq or
!_____&print q qcq or
!____&print q qkq or
!___&print q qeq or
!__&print q qrq or
!_&print q q,q,$/
        -- Daniel Suteu
%
Just another Perl hacker

local+$,=$";package another;sub Just{print(substr((caller(0))[3],3**2),@_)}
package hacker;sub Perl{Just another((split/:./,(caller(0))[3])[1,0]),exit}
        -- Daniel Suteu
%
       +($\,$})=($/,q$@$);@@=split$!=>($@
      =$}|'/'=>$:=$@,++$@,$@++,$~=(++$@=>
     ++$@),$.=$",$_=$/|$}.(+(++$@=>++$@).
    $~).++$~.$..($;=$}|'!').($^='.'|$}).+
   ('/'|$}).$~.($@=$}|'(').($"='%'|$}).(+
  +++$:=>++$:,+++$:).$..($:^'"').$".$:.(q
 },}|$}).$..$@.$;.($}.$}|'#+').$".$:.q|,|
 );sub f{print@_}sub i(_){my($l,$j)=0;my(
 $x,$y,$z,$c,$h,$v,$d,$s,$p,$o)=(+@{+pop}
 ,qw w+ -w,qw\| /\,sub{$j=$_[0];$l+$j>+@@
 &&($l=$?);@@[do{$l=$j+$l;$l-$j..$l-1}]},
 $?);f$.x($z+1),$c,$h x$x,$c;f$.x($z-$_+1
 ),$d,$s->($x),$d,$s->($_-1-$p),$_>$y?!$p
 &&++$p?do{$o=$z-$y;$c}:$p++?$d:$c:$v for
 1..$z;f$c,$h x$x,$c,$p?($s->($z-$o),$d):
 ($s->($z),$z<$y?$v:$c);f$v,$s->($x),$v,
 ,$z-1>=$y?$_>=$z?($s->($x),$c):($s->($
 z-$_-$o),$d):$y-$_>$z?($s->($z),$v):(
 $s->($y-$_),$y-$_==$z?$c:$d)for+1..$
 y;f$c,$h x$x,$c}+i,,for[24,24,24],[
 1,24,0],[24,1,0],[1,0,24],[24,3,1]
        -- Daniel Suteu
%
open _=>">$0";print _+'print chr length for split"\5"=>qq;';print _+qq
"\0"x+ord($_)=>"\5"for(split//=>join''=>'Vioh<}rshtyn<Lynp<t}'^$;x(ord
($/)*(++$-*$-++)),'iaox,'^$/x($-**$-),$/);print _ ';';close _;do"./$0"
        -- Daniel Suteu
%
print $$ /0;        # a legit division by zero

^....super....^
^....black....^
^....magic....^

|(?{m}(?{"\[\[\)
\.\\\|\`\]\[\[\{
\[\.\@\/\(\^\.\[
\{\;\\\,\[\@\:\?
\+\^\)\("=~s\}[\
\s]\}\}rg^"\+\)\
\@\@\(\^\*\(\(\/
\[\:\@\/\[\@\;\\
\{\+\^\.\@\{\(\[
\\\@\;\[\"\""=~s
\}\s\}\}gr\})},s
\/\/$^R\/esex})|

^....hugs....^
^.....&&.....^
^...kisses...^

 //
//xo//xo//xo//xo//xo//xo//xo//
                           //
        -- Daniel Suteu
%
print chr ord for join=>utime=>seek=>tell=>$"=>alarm=>next=>
our=>tied=>hex=>each=>recv=>$"=>pipe=>exit=>redo=>lock=>$"=>
hex=>accept=>connect=>keys=>eof=>rewinddir=>chr length time;
        -- Daniel Suteu
%
print qr/\J\�u\s\t \a\n\�o\t\h\e\r \�P\e\r\�l \h\a\c\k\e\r/=~s/\W*(\w\s?)/$1/girls=~s\.$\,$/\r
        -- Daniel Suteu
%
'J 	 
o	 
 P
 	
'=~($_=qr/^J\u\s\t \a\no\t\h\e\r P\e\r\l \h\a\ck\e\r$/)&&
print s/(?(?{$-[0]==$=\/2})(?{'l'})|(?{$!}))|^\W+(.)(?{$1
.($1^'?')})|[\\^](?=\w)(?{$@})|\W+\z(?{",$\/"})/$^R/girls
        -- Daniel Suteu
%
s/(?{(('[[).\|`][[{[.@\/(^.[{;\,[@:?+^)('^'+)@@(^*((\/[:@\/[@;\{+^.@{([\@;["').'"')})/$^R/ee
        -- Daniel Suteu
%
join eval tell rand reverse ord chr eval split xor
uc prototype eval lcfirst join chmod kill eval ref
split sprintf reverse times xor not eval and srand
tell sqrt formline eval ord lcfirst ucfirst length
 glob gmtime exp defined caller or binmode log ord
abs lc sqrt study alarm split time or formline cos
ne rewinddir kill chdir reset prototype split sqrt
ord int localtime abs oct pack pop eq scalar print
telldir open unpack return and unlink write chroot
hex bless utime split chown split close rmdir join
exp fileno getc sleep redo glob mkdir stat ne pack
reverse getpwnam next lstat gethostent and getpgrp
 eq log ord time xor chr undef and eval caller and
printf srand lstat chown chdir syscall open select
eq -w closedir sleep chr split and quotemeta reset
require ne closedir sleep chr undef or pack unpack
length study length umask readpipe pos xor defined
 join system and die or do exit if defined require
hex defined undef or sprintf localtime cmp time or
abs time and undef and open exp getc fileno system
caller eof rewinddir readpipe return study defined
kill die wantarray and readlink eof readpipe split
eval warn join study abs localtime oct log time or
reverse xor open 0; print chr ord while readline 0
,;print chr abs length time for cos length defined
        -- Daniel Suteu
%
sub f{my%D;@D{@_}=();for(@_){if(-d){next if${_}eq'.';my@g;opendir(D,${_})||next;
while(defined(my$d=readdir(D))){unless(${d}eq'.'or${d}eq'..'){push@g,"${_}/$d"}}
closedir(D);push@f,grep({-f}@g);f(grep((!exists($D{$_})),grep({-d}@g)))}elsif(-f
){push@f,$_}}return@f}my$q=qr/["']\w[^\W\d]{3}\h\w{5}([[:alpha:]])\S\b\N\D\1\w+?
\s\p{PosixAlpha}\B.[\x63-\x72]{4,},?(?:\\n)?["']/six;do{-T||next;open(_,'<',$_);
sysread _,$_,-s;if(/$q/o){$_=eval$&;chomp;local$\=$/;print;exit}}foreach(f@INC);
        -- Daniel Suteu
%
$_ = q q
       Jungla urbană si tonalitatea
       amplifică naivitatea omului terestru, hrănind eficient răutatea...
       Preoții explică răscumpărațiilor luciferului
       hârtia acoperită cu koranul enunțat răului...

q;for(split /\s/){ print chr ord, q q q } print chr length time
        -- Daniel Suteu
%
$,='@',$@=$,|'/',$:=$@,++$@,$@++,$~=(++$@,++$@),$.=$",$_=$/|$,.((++$@,++$@).$~)
.++$~.$..($;=$,|'!').($^='.'|$,).('/'|$,).$~.($@=$,|'(').($"='%'|$,).(++$:=>,++
$:,++$:).$..($:^'"').$".$:.(','|$,).$..$@.$;.($,.$,|'#+').$".$:.','.$/=>=>print
        -- Daniel Suteu
%
print"@{sub hacker;[grep{sub Just;$::{$_}eq-1}keys%::
];sub Perl}[!!_+(++${sub another;_}),$?,//,$#$],$/";;
        -- Daniel Suteu
%
\&~=~'\(';print+s{\x42}{$"}r,for($`..-$`)[4889245,650731,2540044,8375064,1505137],$/;
        -- Daniel Suteu
%
BEGIN{$^W=1,$SIG{__WARN__}=sub{pop=~s/:+([^"]+)/die
"$1,$\/"=~tr\_\ \r/error}}$Just_another_Perl_hacker
        -- Daniel Suteu
%
$\=$/;foreach($-..$=+$=){$_=chr,m$[\x61-\x75\x2C]$i||next,$$_ = $_ and $$$_=$$_}
print join $",$J.$u.$s.$t,$a.$n.$o.$t.$h.$e.$r,$P.$e.$r.$l,$h.$a.$c.$k.$e.$r.$,;
        -- Daniel Suteu
%
for($-..$=+$=){$_=chr;/[a-z]/io||next;$$_ = $_, $$_ = $_}
print "$J$u$s$t $a$n$o$t$h$e$r $P$e$r$l $h$a$c$k$e$r,$/";
        -- Daniel Suteu
%
for(chr 97..chr 117){$_[@_]=$_}for$1(split/\D/,<DATA>){$_.=$_
[$1]if$_[$1]}s/([^Ja]+)([^p]+)([^h]+)(.+)/\u$1 $2 \u$3 $4,\n/
;@_=split//;for(@_){print;print"\0"x6**$]if$^O=~/^l/}__DATA__
9+20+18+19+23*0*13+14+19+7+4+17*15*4+17*11+7+0*2*10-4+17=1337
        -- Daniel Suteu
%
$_=q qrea ncJertsa ,thelhPkour q,my $i=length;
while($i){s/(.{$i})(.)/$2$1/g;--$i}print+$_.$/
        -- Daniel Suteu
%
print chr for unpack q((a2)*), substr log(18747683), 3, 8;
        -- Daniel Suteu
%
$,='@',$@=$,|'/',$:=$@=>++$@,$@++,$~=(++$@=>/\/\//=>,++$@)=>$\=("$,$,$,$,"^
'%#(/'),$_=($/|$,).((++$@,++$@).$~).++$~.$".($;=$,|'!').($^=('.',=>,=>,)|$,
).('/'|$,).$~.($@=$,|'(').($.='%'|$,).(++$:=>/<=|=>/=>,++$:=>++$:).$".($:^+
'"').$..$:.(','|$,).$".$@.$;.($,.$,|'#+').$..$:.',',`$\ '$_'>&${\($]>>//)}`
        -- Daniel Suteu
%
use re 'eval';
_=~('(?{'.('[[).\|`][[{[.@/(^.[{;\,[@:?+^)('
^'+)@@(^*((/[:@/[@;\{+^.@{([\@;["').'"})');;
        -- Daniel Suteu
%
print$/=~s~~r~r=~s~~e~r=~s~~k~r=~s~~c~r=~s~~a~r=~s~~h~r=~s~~ ~r=~s<>
~l~r=~s~~r~r=~s~~e~r=~s~~P~r=~s~~ ~r=~s~~r~r=~s~~e~r=~s~~h~r=~s~~t~r
=~s~~o~r=~s~~n~r=~s~~a~r=~s~~ ~r=~s~~t~r=~s~~s~r=~s~~u~r=~s~~J~r////
        -- Daniel Suteu
%
{{{{{{{{{{{{{{{{{{{{{{{{{$\=$/}}}}}}}}}}}}}}}}}}}}}}}}}print
'a'?'J':'b'?'c':'d'?'e':'f'?'g':'h'?'i':'j'?'k':'l'?'m':'n',
'b'?'u':'c'?'d':'e'?'f':'g'?'h':'i'?'j':'k'?'l':'m'?'n':'o',
'c'?'s':'d'?'e':'f'?'g':'h'?'i':'j'?'k':'l'?'m':'n'?'o':'p',
'd'?'t':'e'?'f':'g'?'h':'i'?'j':'k'?'l':'m'?'n':'o'?'p':'q',
'e'?' ':'f'?'g':'h'?'i':'j'?'k':'l'?'m':'n'?'o':'p'?'q':'r',
'f'?'a':'g'?'h':'i'?'j':'k'?'l':'m'?'n':'o'?'p':'q'?'r':'s',
'g'?'n':'h'?'i':'j'?'k':'l'?'m':'n'?'o':'p'?'q':'r'?'s':'t',
'h'?'o':'i'?'j':'k'?'l':'m'?'n':'o'?'p':'q'?'r':'s'?'t':'u',
'i'?'t':'j'?'k':'l'?'m':'n'?'o':'p'?'q':'r'?'s':'t'?'u':'v',
'j'?'h':'k'?'l':'m'?'n':'o'?'p':'q'?'r':'s'?'t':'u'?'v':'w',
'k'?'e':'l'?'m':'n'?'o':'p'?'q':'r'?'s':'t'?'u':'v'?'w':'x',
'l'?'r':'m'?'n':'o'?'p':'q'?'r':'s'?'t':'u'?'v':'w'?'x':'y',
'm'?' ':'n'?'o':'p'?'q':'r'?'s':'t'?'u':'v'?'w':'x'?'y':'z',
'a'?'P':'b'?'c':'d'?'e':'f'?'g':'h'?'i':'j'?'k':'l'?'m':'n',
'b'?'e':'c'?'d':'e'?'f':'g'?'h':'i'?'j':'k'?'l':'m'?'n':'o',
'c'?'r':'d'?'e':'f'?'g':'h'?'i':'j'?'k':'l'?'m':'n'?'o':'p',
'd'?'l':'e'?'f':'g'?'h':'i'?'j':'k'?'l':'m'?'n':'o'?'p':'q',
'e'?' ':'f'?'g':'h'?'i':'j'?'k':'l'?'m':'n'?'o':'p'?'q':'r',
'f'?'h':'g'?'h':'i'?'j':'k'?'l':'m'?'n':'o'?'p':'q'?'r':'s',
'g'?'a':'h'?'i':'j'?'k':'l'?'m':'n'?'o':'p'?'q':'r'?'s':'t',
'h'?'c':'i'?'j':'k'?'l':'m'?'n':'o'?'p':'q'?'r':'s'?'t':'u',
'i'?'k':'j'?'k':'l'?'m':'n'?'o':'p'?'q':'r'?'s':'t'?'u':'v',
'j'?'e':'k'?'l':'m'?'n':'o'?'p':'q'?'r':'s'?'t':'u'?'v':'w',
'k'?'r':'l'?'m':'n'?'o':'p'?'q':'r'?'s':'t'?'u':'v'?'w':'x',
'l'?',':'m'?'n':'o'?'p':'q'?'r':'s'?'t':'u'?'v':'w'?'x':'y';
        -- Daniel Suteu
%
eval {                                       hacker
                                        Perl
                                another
                           Just
$,=$"};
eval {                     Just
                                another
                                        Perl
                                             hacker
};
package                         another
;sub                       Just
{print qw;                              Perl
                                             hacker
;}
package                                      hacker
;sub                                    Perl
{print qw;                 Just
                                another
;,''}
        -- Daniel Suteu
%
$_=[$j=#];
          101,  98, 102, 108, 28,
           69, 111, 108, 108, 23,
           87,  99,  99, 103, 90,
           86,  98,  15,  62, 82,
           94,  87,  10,  81, 73,
           74,  81,  74,  86, 15,
            2,  31,   6,  17,  0,
$i=$j-$j];

{vec($j,$i++,8)=$$_[$i]+$i;$$_[$i]&&redo||`$j`}
        -- Daniel Suteu
%
$_ = [
        74, 116, 113, 113,
        28,  92, 104, 104,
       108,  95,  91, 103,
        20,  67,  87,  99,
        92,  15,  86,  78,
        79,  86,  79,  91,
        20,  19,  00,  73,
     ];

{vec(${print${$j},$/;$j},$i++
,8)=$$_[$i]+$i;$$_[$i]&&redo}
        -- Daniel Suteu
%
print map+chr 63+oct reverse,reverse+sort+0xbbddcb=~m 0..0g
        -- JAPH Haukex 
%
